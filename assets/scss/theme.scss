/*! Theme: Capacity v1.14.1 */
// Libraries
/* scss-combine:../../node_modules/normalize.scss/normalize */
/*! normalize.scss v0.1.0 | MIT License | based on git.io/normalize */

/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */

html {
  font-family: sans-serif; /* 1 */
  -ms-text-size-adjust: 100%; /* 2 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/**
 * Remove default margin.
 */

body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */

audio,
canvas,
progress,
video {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */

[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */

/**
 * Remove the gray background color from active links in IE 10.
 */

a {
  background-color: transparent;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */

a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */

/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */

abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */

b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */

dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */

mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */

/**
 * Remove border when inside `a` element in IE 8/9/10.
 */

img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */

svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */

/**
 * Address margin not present in IE 8/9 and Safari.
 */

figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */

hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */

pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */

code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */

/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */

/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */

button,
input,
optgroup,
select,
textarea {
  color: inherit; /* 1 */
  font: inherit; /* 2 */
  margin: 0; /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */

button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */

button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button; /* 2 */
  cursor: pointer; /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */

input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */

input[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box; /* 2 */
  box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */

legend {
  border: 0; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */

textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */

optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/* scss-combine:../../node_modules/bc-baseline/baseline */
/* scss-combine:lib/extends */
%clearfix {
  *zoom: 1;

  &:before,
  &:after {
    display: table;
    content: "";
  }

  &:after {
    clear: both;
  }
}

%font-smoothing {
  -moz-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

/* scss-combine:lib/mixins */
@mixin media($max: false, $min: false) {
  @if $max {
    @if $min {
      @media screen and (max-width: $max - 1) and (min-width: $min) { @content; }
    } @else {
      @media screen and (max-width: $max - 1) { @content; }
    }
  } @else {
    @media screen and (min-width: $min) { @content; }
  }
}

@mixin hover($color, $property: color) {
  @if lightness($color) > 10% {
    #{$property}: darken($color,8%);
  } @else {
    #{$property}: lighten($color,10%);
  }
}

@mixin button-hover($color, $property: color) {
  @if lightness($color) > 20% {
    #{$property}: darken($color,5%);
  } @else {
    #{$property}: lighten($color,6%);
  }
}

@mixin retina {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}

/* scss-combine:lib/text-inputs */
// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_text-inputs.scss

@function assign-inputs($inputs, $pseudo: null) {
  $list: ();

  @each $input in $inputs {
    $input: unquote($input);
    $input: if($pseudo, $input + ":" + $pseudo, $input);
    $list: append($list, $input, comma);
  }

  @return $list;
}


$text-inputs-list: 'input[type="color"]',
                  'input[type="date"]',
                  'input[type="datetime"]',
                  'input[type="datetime-local"]',
                  'input[type="email"]',
                  'input[type="month"]',
                  'input[type="number"]',
                  'input[type="password"]',
                  'input[type="search"]',
                  'input[type="tel"]',
                  'input[type="text"]',
                  'input[type="time"]',
                  'input[type="url"]',
                  'input[type="week"]',
                  'input:not([type])',
                  'textarea';

$all-text-inputs:        assign-inputs($text-inputs-list);
$all-text-inputs-active: assign-inputs($text-inputs-list, active);
$all-text-inputs-focus:  assign-inputs($text-inputs-list, focus);
$all-text-inputs-hover:  assign-inputs($text-inputs-list, hover);


/* scss-combine:styles/general */
// scss-lint:disable VariableForProperty ColorVariable

// Box model
// See: http://www.paulirish.com/2012/box-sizing-border-box-ftw/

html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

// - Links

a {
  text-decoration: none;
}

// - Headers

h1,
h2,
h3,
h4,
h5,
h6 {
  line-height: 1.25;
}

// - Basic elements

img {
  max-width: 100%;
}

ul,
ol,
dl {
  padding: 0;
  margin: 0;
}

ul {
  list-style: outside none;
}

ol {
  list-style: outside decimal;
}

li {

}

hr {
  height: 2px;
  border: 0;
}

blockquote {
  > *:first-child {
    margin-top: 0;
  }

  > *:last-child {
    margin-bottom: 0;
  }
}

figure {
  margin: 0;
}

iframe {
  max-width: 100%;
  border: 0;
}

pre {
  padding: 1em;
  background: #fafafa;
}

.show-for-sr {
  // scss-lint:disable ImportantRule
  position: absolute !important;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

/* scss-combine:styles/button */
.button {
  display: inline-block;
  line-height: normal;
  text-align: center;
  cursor: pointer;
  border: 0;
  border-radius: 0;
  -webkit-appearance: none;

  & + & {
    margin-left: 5px;
  }
}

/* scss-combine:styles/form */
// scss-lint:disable VariableForProperty ColorVariable


.form-fieldset {
  padding: 0;
  margin: 0;
  border: 0;
}

// - Fields, a wrapper for a label and input

.form-field {}

// - Labels

// <label class="form-label">
//   <div class="form-label-text">Label</div>
//   ... inputs ...
// </label>
.form-label {
  display: block;
}

.form-label-text,
.form-label-text-inline {
  display: inline-block;
}

// - Inputs

// text, email, password, search, telephone, tel, number, textarea, select
.form-input {
  display: block;
  border: 1px solid;
  border-color: inherit;
  border-radius: 0;
  box-sizing: border-box;

  &::placeholder { opacity: 0.8; }
}

textarea.form-input { resize: vertical; }

#{$all-text-inputs} {
  &.form-input {
    -webkit-appearance: none;
  }
}

// Wrapper for checkbox and radio inputs
// <div class="form-field form-inline">
//   <label class="form-label">
//     <span class="form-label-text">Check Me</span>
//     <input class="form-input" type="checkbox">
//   </label>
// </div>
.form-inline {
  .form-label-text {
    display: inline-block;
    vertical-align: middle;
  }

  .form-input {
    display: inline-block;
  }
}

/* scss-combine:styles/table */
table {
  margin: 1em 0;
  background: transparent;
  border: 1px solid;
  border-collapse: separate;
  border-top: 0;
  border-color: inherit;

  &.table-clean {
    border: 0;
    border-radius: 0;
  }
}

td,
th {
  padding: 20px;
  border-top: 1px solid;
  border-top-color: inherit;

  .table-clean & {
    border: 0;
  }
}

th {
  font-weight: bold;
}

td {
  border-left: 1px solid;
  border-left-color: inherit;

  &:first-child {
    border-left: 0;
  }
}


/* scss-combine:../../node_modules/susy/sass/susy */
// Susy
// ====

/* scss-combine:susy/language/susy */
// Susy Next Syntax
// ================

$susy-version: 2.1;

/* scss-combine:../su */
// Su
// ==

/* scss-combine:su/utilities */
// Map Functions
// =============


// Truncate List
// -------------
// - Return a list, truncated to a given length
@function _susy-truncate-list(
  $list,
  $length
) {
  $_return: ();

  @for $i from 1 through length($list) {
    $_return: if($i <= $length, append($_return, nth($list, $i)), $_return);
  }

  @return $_return;
}


// Deep Get
// --------
// - Return a value deep in nested maps
@function _susy-deep-get(
  $map,
  $keys...
) {
  $_return: $map;

  @each $key in $keys {
    @if type-of($_return) == map {
      $_return: map-get($_return, $key);
    }
  }

  @return $_return;
}


// Deep Set
// --------
// - Set a value deep in nested maps
@function _susy-deep-set(
  $map,
  $keys-value...
) {
  $_value: nth($keys-value, -1);
  $_keys: _susy-truncate-list($keys-value, length($keys-value) - 1);
  $_length: length($_keys);
  $_return: ();

  @for $i from 1 through $_length {
    $_n: 0 - $i;
    $_level: _susy-truncate-list($_keys, $_length + $_n);
    $_level: _susy-deep-get($map, $_level...);
    $_merge: nth($_keys, $_n);
    $_merge: ($_merge: $_value);
    $_return: if($_level, map-merge($_level, $_merge), $_merge);
    $_value: $_return;
  }

  @return $_return;
}


// Deep Merge
// ----------
// Return 2 objects of any depth, merged
@function _susy-deep-merge(
  $map1,
  $map2
) {

  @if type-of($map1) != map or type-of($map2) != map {
    $map1: $map2;
  } @else {
    @each $key, $value in $map2 {
      $_new: ($key: _susy_deep-merge(map-get($map1, $key), $value));
      $map1: map-merge($map1, $_new);
    }
  }

  @return $map1;
}


// Deep Has-Key
// ------------
// - Return true if a deep key exists
@function _susy-deep-has-key(
  $map,
  $keys...
) {
  $_return: null;
  $_stop: false;

  @each $key in $keys {
    @if not($_stop) {
      $_return: map-has-key($map, $key);
    }

    @if $_return {
      $map: map-get($map, $key);
    } @else {
      $_stop: true;
    }
  }

  @return $_return;
}

/* scss-combine:su/settings */
// Settings
// ========

// Version
// -------
$su-version: 1.1;


// Default Settings
// ----------------
// PRIVATE: The basic settings
$susy-defaults: (
  columns: 4,
  gutters: .25,
);


// User Settings
// -------------
// - Define the $susy variable with a map of your own settings.
// - Set EITHER $column-width OR $container
// - Use $column-width for static layouts
$susy: () !default;


// Susy Defaults
// -------------
// PRIVATE: Add defaults to Susy
@mixin susy-defaults(
  $defaults
) {
  $susy-defaults: map-merge($susy-defaults, $defaults) !global;
}


// Susy Set
// --------
// Change one setting
// - $key   : setting name
// - $value : setting value
@mixin susy-set(
  $key-value...
) {
  $susy: _susy-deep-set($susy, $key-value...) !global;
}


// Susy Get
// --------
// Return one setting from a grid
// - $key     : <keyword>
// - $layout  : <settings>
@function susy-get(
  $key,
  $layout: map-merge($susy-defaults, $susy)
) {
  $layout: parse-grid($layout);
  $_options: $layout $susy $susy-defaults;
  $_break: false;
  $_return: null;

  @each $opt in $_options {
    @if type-of($opt) == map and not($_break) {
      $_keyset: _susy-deep-has-key($opt, $key...);
      @if $_keyset {
        $_return: _susy-deep-get($opt, $key...);
        $_break: true;
      }
    }
  }

  @return $_return;
}

/* scss-combine:su/validation */
// Math Validation
// ===============


// Valid Columns
// -------------
// Check that a column setting is valid.
@function valid-columns(
  $columns,
  $silent: false
) {
  $type: type-of($columns);
  $return: null;

  @if $type == number and unitless($columns) {
    $return: $columns;
  } @else if $type == list {
    $fail: null;
    @each $col in $columns {
      @if type-of($col) == number {
        $fail: $fail or if(unitless($col), null, true);
      } @else {
        $fail: true;
      }
    }
    $return: if($fail, $return, $columns);
  }

  @if $return != $columns and not($silent) {
    $return: null;
    $warn: '$columns must be a unitless number or list of unitless numbers.';
    @warn $warn + ' Current value [#{$type}]: #{$columns}';
  }

  @return $return;
}


// Valid Gutters
// -------------
// Check that a gutter setting is valid.
@function valid-gutters(
  $gutters,
  $silent: false
) {
  $type: type-of($gutters);
  $return: null;

  @if $type == number and unitless($gutters) {
    $return: $gutters;
  } @else if not($silent) {
    $warn: '$gutters must be a unitless number.';
    @warn $warn + ' Current value [#{$type}]: #{$gutters}';
  }

  @return $return;
}

/* scss-combine:su/grid */
// Column math
// ===========


// Is Symmetrical
// --------------
// Returns true if a grid is symmetrical.
// - [$columns]   : <number> | <list>
@function is-symmetrical(
  $columns: susy-get(columns)
) {
  $columns: valid-columns($columns);
  @return if(type-of($columns) == number, $columns, null);
}


// Susy Count
// ----------
// Find the number of columns in a given layout
// - [$columns]   : <number> | <list>
@function susy-count(
  $columns: susy-get(columns)
) {
  $columns: valid-columns($columns);
  @return is-symmetrical($columns) or length($columns);
}


// Susy Sum
// --------
// Find the total sum of column-units in a layout
// - [$columns]   : <number> | <list>
// - [$gutters]   : <ratio>
// - [$spread]    : false/narrow | wide | wider
@function susy-sum(
  $columns  : susy-get(columns),
  $gutters  : susy-get(gutters),
  $spread   : false
) {
  $columns: valid-columns($columns);
  $gutters: valid-gutters($gutters);

  $spread: if($spread == wide, 0, if($spread == wider, 1, -1));
  $gutter-sum: (susy-count($columns) + $spread) * $gutters;
  $column-sum: is-symmetrical($columns);

  @if not($column-sum) {
    @each $column in $columns {
      $column-sum: ($column-sum or 0) + $column;
    }
  }

  @return $column-sum + $gutter-sum;
}


// Susy Slice
// ----------
// Return a subset of columns at a given location.
// - $span        : <number>
// - $location    : <number>
// - [$columns]   : <number> | <list>
@function susy-slice(
  $span,
  $location,
  $columns: susy-get(columns)
) {
  $columns: valid-columns($columns);
  $sub-columns: $span;

  @if not(is-symmetrical($columns)) {
    $location: $location or 1;
    $sub-columns: ();
    @for $i from $location to ($location + $span) {
      $sub-columns: append($sub-columns, nth($columns, $i));
    }
  }

  @return $sub-columns;
}


// Susy
// ----
// Find the sum of a column-span.
// - $span        : <number>
// - $location    : <number>
// - [$columns]   : <number> | <list>
// - [$gutters]   : <ratio>
// - [$spread]    : false/narrow | wide | wider
@function susy(
  $span,
  $location     : false,
  $columns      : susy-get(columns),
  $gutters      : susy-get(gutters),
  $spread       : false
) {
  $columns: valid-columns($columns);
  $gutters: valid-gutters($gutters);
  $span: susy-slice($span, $location, $columns);

  @return susy-sum($span, $gutters, $spread);
}


/* scss-combine:../output/float */
// Float API
// =========

/* scss-combine:shared */
// Shared API
// ==========

/* scss-combine:support */
// Susy Browser Support
// ====================

/* scss-combine:support/support */
// Browser Support
// ===============

// Susy Support Defaults
// ---------------------
@include susy-defaults((
  use-custom: (
    clearfix: false,
    background-image: true,
    background-options: false,
    breakpoint: true,
    box-sizing: true,
    rem: true,
  ),
));


// Susy Support [mixin]
// --------------------
// Send property-value pairs to the proper support modules.
// - $prop  : <css property>
// - $val   : <css value>
@mixin susy-support(
  $prop,
  $val
) {
  // Background Support
  @if $prop == background-image {
    @include susy-background-image($val);
  } @else if $prop == background-size {
    @include susy-background-size($val);
  } @else if $prop == background-origin {
    @include susy-background-origin($val);
  } @else if $prop == background-clip {
    @include susy-background-clip($val);
  }

  // Box-Sizing Support
  @else if $prop == box-sizing {
    @include susy-box-sizing($val);
  }

  // Rem Support
  @else {
    @include susy-rem($prop, $val);
  }
}


// Susy Support [function]
// -----------------------
// Check for support of a feature.
// - $feature       : <string>
//                    - e.g "rem" or "box-sizing"
// - $requirements  : <map>
//                    - e.g (variable: rem-with-px-fallback, mixin: rem)
// - $warn          : <bool>
@function susy-support(
  $feature,
  $requirements: (),
  $warn: true
) {
  $_support: susy-get(use-custom $feature);

  @if $_support {
    $_fail: false;

    @each $_type, $_req in $requirements {
      @each $_i in $_req {
        $_pass: call(unquote("#{$_type}-exists"), $_i);

        @if not($_pass) {
          $_fail: true;
          @if $warn {
            @warn "You requested custom support of #{$feature}, but the #{$_i} #{$_type} is not available.";
          }
        }
      }
    }

    $_support: if($_fail, false, $_support);
  }

  @return $_support;
}

/* scss-combine:support/prefix */
// Susy Prefix
// ===========

// Prefix
// ------
// Output simple prefixed properties.
// - $prop      : <css property>
// - $val       : <css value>
// - [$prefix]  : <browser prefix list>
@mixin susy-prefix(
  $prop,
  $val,
  $prefix: official
) {
  @each $fix in $prefix {
    $fix: if($fix == official or not($fix), $prop, '-#{$fix}-#{$prop}');
    @include susy-rem($fix, $val);
  }
}

/* scss-combine:support/background */
// Background Properties
// =====================

// Susy Background Image
// ---------------------
// Check for an existing support mixin, or provide a simple fallback.
// - $image: <background-image>
@mixin susy-background-image(
  $image
) {
  @if susy-support(background-image, (mixin: background-image), $warn: false) {
    @include background-image($image...);
  } @else {
    background-image: $image;
  }
}

// Susy Background Size
// ---------------------
// Check for an existing support mixin, or provide a simple fallback.
// - $image: <background-size>
@mixin susy-background-size(
  $size
) {
  @if susy-support(background-options, (mixin: background-size)) {
    @include background-size($size);
  } @else {
    background-size: $size;
  }
}

// Susy Background Origin
// ----------------------
// Check for an existing support mixin, or provide a simple fallback.
// - $image: <background-origin>
@mixin susy-background-origin(
  $origin
) {
  @if susy-support(background-options, (mixin: background-origin)) {
    @include background-origin($origin);
  } @else {
    background-origin: $origin;
  }
}

// Susy Background Clip
// --------------------
// Check for an existing support mixin, or provide a simple fallback.
// - $image: <background-clip>
@mixin susy-background-clip(
  $clip
) {
  @if susy-support(background-options, (mixin: background-clip)) {
    @include background-clip($clip);
  } @else {
    background-clip: $clip;
  }
}

/* scss-combine:support/box-sizing */
// Box Sizing
// ==========

// Box Sizing
// ----------
// Check for an existing support mixin, or provide a simple fallback.
// - $model: <box-sizing>
@mixin susy-box-sizing(
  $model: content-box
) {
  @if $model {
    @if susy-support(box-sizing, (mixin: box-sizing), $warn: false) {
      @include box-sizing($model);
    } @else {
      $prefix: (moz, webkit, official);
      @include susy-prefix(box-sizing, $model, $prefix);
    }
  }
}

/* scss-combine:support/rem */
// rem Support
// ===========

// rem
// ---
// Check for an existing support mixin, or output directly.
// - $prop  : <css property>
// - $val   : <css value>
@mixin susy-rem(
  $prop,
  $val
) {
  $_reqs: (
    variable: rhythm-unit rem-with-px-fallback,
    mixin: rem,
  );
  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {
    @include rem($prop, $val);
  } @else {
    #{$prop}: $val;
  }
}

/* scss-combine:support/clearfix */
// Susy Fallback Clearfix
// ======================


// Clearfix
// --------
// Check for an existing support mixin, or provide a simple fallback.
@mixin susy-clearfix {
  @if susy-support(clearfix, (mixin: clearfix)) {
    @include clearfix;
  } @else {
    &:after {
      content: " ";
      display: block;
      clear: both;
    }
  }
}



/* scss-combine:shared/inspect */
// Debugging
// =========

// Susy Inspect
// ------------
// Output arguments passed to a inspect.
// - $mixin  : <susy mixin>
// - $inspec   : <mixin arguments>

@mixin susy-inspect(
  $mixin,
  $inspect
) {
  $show: false;

  @each $item in $inspect {
    @if index($item, inspect) {
      $show: true;
    }
  }

  @if $show or susy-get(debug inspect) {
    -susy-#{$mixin}: inspect($inspect);
  }
}

/* scss-combine:shared/output */
// Output
// ======

// Output
// ------
// Output CSS with proper browser support.
// - $styles  : <map of css property-value pairs>
@mixin output(
  $styles
) {
  @each $prop, $val in $styles {
    @include susy-support($prop, $val);
  }
}

/* scss-combine:shared/direction */
// Direction Helpers
// =================

// Susy Flow Defaults
// ------------------
// - PRIVATE
@include susy-defaults((
  flow: ltr,
));

// Get Direction
// -------------
// Return the 'from' or 'to' direction of a ltr or rtl flow.
// - [$flow]  : ltr | rtl
// - [$key]   : from | to
@function get-direction(
  $flow: map-get($susy-defaults, flow),
  $key: from
) {
  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));
  @return map-get($return, $key);
}

// To
// --
// Return the 'to' direction of a flow
// - [$flow]  : ltr | rtl
@function to(
  $flow: map-get($susy-defaults, flow)
) {
  @return get-direction($flow, to);
}

// From
// ----
// Return the 'from' direction of a flow
// - [$flow]  : ltr | rtl
@function from(
  $flow: map-get($susy-defaults, flow)
) {
  @return get-direction($flow, from);
}

/* scss-combine:shared/background */
// Grid Background API
// ===================
// - Sub-pixel rounding can lead to several pixels variation between browsers.

// Grid Background Output
// ----------------------
// - $image: background-image
// - $size: background-size
// - $clip: background-clip
// - [$flow]: ltr | rtl
@mixin background-grid-output (
  $image,
  $size: null,
  $clip: null,
  $flow: map-get($susy-defaults, flow)
) {
  $output: (
    background-image: $image,
    background-size: $size,
    background-origin: $clip,
    background-clip: $clip,
    background-position: from($flow) top,
  );

  @include output($output);
}

/* scss-combine:shared/container */
// Shared Container API
// ====================

// Container Output
// ----------------
// - [$width]         : <length>
// - [$justify]       : left | center | right
// - [$math]          : fluid | static
@mixin container-output(
  $width,
  $justify: auto auto,
  $property: max-width
) {
  $output: (
    #{$property}: $width or 100%,
    margin-left: nth($justify, 1),
    margin-right: nth($justify, 2),
  );

  @include output($output);
}

/* scss-combine:shared/margins */
// Margins API
// ===========

// Margin Output
// -------------
// - $before  : <length>
// - $after   : <length>
// - [$flow]  : ltr | rtl
@mixin margin-output(
  $before,
  $after,
  $flow: map-get($susy-defaults, flow)
) {
  $to: to($flow);
  $from: from($flow);

  $output: (
    margin-#{$from}: $before,
    margin-#{$to}: $after,
  );

  @include output($output);
}

/* scss-combine:shared/padding */
// Padding API
// ===========

// Padding Output
// --------------
// - $before  : <length>
// - $after   : <length>
// - [$flow]  : ltr | rtl
@mixin padding-output(
  $before,
  $after,
  $flow: map-get($susy-defaults, flow)
) {
  $to: to($flow);
  $from: from($flow);

  $output: (
    padding-#{$from}: $before,
    padding-#{$to}: $after,
  );

  @include output($output);
}






/* scss-combine:float/container */
// Float Container API
// ===================

// Float Container
// ---------------
// - [$width]         : <length>
// - [$justify]       : left | center | right
// - [$math]   : fluid | static
@mixin float-container(
  $width,
  $justify: auto auto,
  $property: max-width
) {
  @include susy-clearfix;
  @include container-output($width, $justify, $property);
}

/* scss-combine:float/span */
// Float Span API
// ==============

// Float Span Output
// -----------------
// - $width             : <length>
// - [$float]           : from | to
// - [$margin-before]   : <length>
// - [$margin-after]    : <length>
// - [$padding-before]  : <length>
// - [$padding-after]   : <length>
// - [$flow]            : ltr | rtl
@mixin float-span-output(
  $width,
  $float            : from,
  $margin-before    : null,
  $margin-after     : null,
  $padding-before   : null,
  $padding-after    : null,
  $flow             : map-get($susy-defaults, flow)
) {
  $to     : to($flow);
  $from   : from($flow);

  $output: (
    width: $width,
    float: if($float == to, $to, null) or if($float == from, $from, null),
    margin-#{$from}: $margin-before,
    margin-#{$to}: $margin-after,
    padding-#{$from}: $padding-before,
    padding-#{$to}: $padding-after,
  );

  @include output($output);
}

/* scss-combine:float/end */
// Float Ends API
// ==============

// Susy End Defaults
// -----------------
// - PRIVATE
@include susy-defaults((
  last-flow: to,
));

// Float Last
// ----------
// - [$flow]  : ltr | rtl
@mixin float-last(
  $flow: map-get($susy-defaults, flow),
  $last-flow: map-get($susy-defaults, last-flow),
  $margin: 0
) {
  $to: to($flow);

  $output: (
    float: if($last-flow == to, $to, null),
    margin-#{$to}: $margin,
  );

  @include output($output);
}

// Float First
// -----------
// - [$flow]  : ltr | rtl
@mixin float-first(
  $flow: map-get($susy-defaults, flow)
) {
  $output: (
    margin-#{from($flow)}: 0,
  );

  @include output($output);
}

/* scss-combine:float/isolate */
// Float Isolation API
// ===================

// Isolate Output
// --------------
// - $push    : <length>
// - [$flow]  : ltr | rtl
@mixin isolate-output(
  $push,
  $flow: map-get($susy-defaults, flow)
) {
  $to: to($flow);
  $from: from($flow);

  $output: (
    float: $from,
    margin-#{$from}: $push,
    margin-#{$to}: -100%,
  );

  @include output($output);
}



/* scss-combine:susy/settings */
// Susy Settings
// =============

// Susy Language Defaults
// ----------------------
// - PRIVATE
@include susy-defaults((
  container: auto,
  math: fluid,
  output: float,
  container-position: center,
  gutter-position: after,
  global-box-sizing: content-box,
  debug: (
    image: hide,
    color: rgba(#66f, .25),
    output: background,
    toggle: top right,
  ),
));


// Valid Keyword Values
// --------------------
// - PRIVATE: DONT'T TOUCH
$susy-keywords: (
  container: auto,
  math: static fluid,
  output: isolate float,
  container-position: left center right,
  flow: ltr rtl,
  gutter-position: before after split inside inside-static,
  box-sizing: border-box content-box,
  span: full,
  edge: first alpha last omega full,
  spread: narrow wide wider,
  gutter-override: no-gutters no-gutter,
  role: nest,
  clear: break nobreak,
  debug image: show hide show-columns show-baseline,
  debug output: background overlay,
);


// Parse Susy Keywords and Maps
// ----------------------------
@function parse-settings(
  $short: $susy
) {
  $_return: ();

  @if type-of($short) == map {
    $_return: $short;
  } @else {
    @each $item in $short {
      // strings
      @if type-of($item) == string {
        @each $key, $value in $susy-keywords {
          @if index($value, $item) {
            $_key-value: append($key, $item);
            $_return: _susy-deep-set($_return, $_key-value...);
          }
        }
      // maps
      } @else if type-of($item) == map {
        $_return: map-merge($_return, $item);
      }
    }
  }

  @return $_return;
}


// Parse Columns & Gutters
// -----------------------
@function parse-layout(
  $short
) {
  $_return: ();
  $_columns: ();
  $_gutters: null;

  @if not(unitless(nth(nth($short, 1), 1))) {
    $_gutters: nth($short, 1);
  } @else {
    $_columns: (columns: nth($short, 1));
    $_gutters: if(length($short) > 1, nth($short, 2), $_gutters);
  }

  @if type-of($_gutters) == list and length($_gutters) > 0 {
    $_gutters: (
      gutters: nth($_gutters, 2) / nth($_gutters, 1),
      column-width: nth($_gutters, 1),
    );
  } @else {
    $_gutters: if($_gutters, (gutters: $_gutters), ());
  }

  $_return: map-merge($_return, $_columns);
  $_return: map-merge($_return, $_gutters);

  @return $_return;
}


// Parse Grid/Context
// ------------------
@function parse-grid(
  $short: $susy
) {
  $_return: parse-settings($short);
  $_layout: ();

  @if type-of($short) == map {
    $_return: $short;
  } @else {
    @each $item in $short {
      // number or list
      @if type-of($item) == number or type-of($item) == list {
        @if type-of($item) == list or unitless($item) {
          $_layout: append($_layout, $item);
        } @else {
          $_return: map-merge($_return, (container: $item));
        }
      }
    }

    $_layout: if(length($_layout) > 0, parse-layout($_layout), $_layout);
  }

  @return map-merge($_return, $_layout);
}


// Parse Span
// ----------
@function parse-span(
  $short,
  $key: span
) {
  $_return: ();

  @if type-of($short) == map {
    $_return: $short;
  } @else {
    $_at: index($short, at);

    @if $_at {
      $_loci: $_at + 1;
      $_location: nth($short, $_loci);
      $_return: map-merge($_return, (location: $_location));
      $short: set-nth($short, $_at, null);
      $short: set-nth($short, $_loci, null);
    }

    $_i: 1;
    $_span: ();

    @while $_i <= length($short) {
      $_this: nth($short, $_i);

      @if type-of($_this) == number {
        $_span: append($_span, $_this);
        $short: set-nth($short, $_i, null);
      } @else if $_this == of {
        $short: set-nth($short, $_i, null);
        $_i: length($short) + 1;
      }

      $_i: $_i + 1;
    }

    @if length($_span) > 0 {
      $_span: if(length($_span) == 1, nth($_span, 1), $_span);
      $_return: map-merge($_return, ($key: $_span));
    }

    $_return: map-merge($_return, parse-grid($short));
  }

  @return $_return;
}


// Parse Gutters
// -------------
@function parse-gutters(
  $short: $susy
) {
  $_gutters: parse-span($short, gutter-override);
  $_span: susy-get(gutter-override, $_gutters);

  @if $_span and not(map-get($_gutters, columns)) {
    $_context: ();
    $_new: ();

    @each $item in $_span {
      @if type-of($item) == number and unitless($item) {
        $_context: append($_context, $item);
      } @else {
        $_new: append($_new, $item);
      }
    }

    $_context: parse-grid($_context);
    $_new: if(length($_new) == 0, null, $_new);
    $_new: if(length($_new) == 1, nth($_new, 1), $_new);
    $_new: (gutter-override: if($_new != $_span, $_new, $_span));

    $_gutters: map-merge($_gutters, $_new);
    $_gutters: map-merge($_gutters, $_context);
  }

  @return $_gutters;
}

/* scss-combine:susy/validation */
// Validation
// ==========


// Validate Column Math
// --------------------
@function valid-column-math(
  $math,
  $column-width
) {
  @if $math == static and not($column-width) {
    @error 'Static math requires a valid column-width setting.';
  }

  @return $column-width;
}

/* scss-combine:susy/grids */
// Grid Syntax
// ===========


// Layout
// ------
// Set a new layout using a shorthand
// - $layout: <settings>
// - $clean: boolean
@mixin layout(
  $layout,
  $clean: false
) {
  $inspect  : $layout;
  $susy     : _get-layout($layout, $clean) !global;

  @include susy-inspect(layout, $inspect);
}


// Use Grid
// --------
// Use an arbitrary layout for a section of code
// - $layout: <settings>
// - $clean: boolean
@mixin with-layout(
  $layout,
  $clean: false
) {
  $inspect  : $layout;
  $old      : $susy;
  $susy     : _get-layout($layout, $clean) !global;

  @include susy-inspect(with-layout, $inspect);

  @content;

  $susy: $old !global;
}


// Layout
// ------
// Return a parsed layout map based on shorthand syntax
// - $layout: <settings>
@function layout(
  $layout: $susy
) {
  @return parse-grid($layout);
}


// Get Layout
// ----------
// Return a new layout based on current and given settings
// - $layout: <settings>
// - $clean: boolean
@function _get-layout(
  $layout,
  $clean: false
) {
  $layout: layout($layout);
  @return if($clean, $layout, _susy-deep-merge($susy, $layout));
}

/* scss-combine:susy/box-sizing */
// Susy Box Sizing
// =================

// Global Box Sizing
// -----------------
// Set a box model globally on all elements.
// - [$box]: border-box | content-box
// - [$inherit]: true | false
@mixin global-box-sizing(
  $box: susy-get(global-box-sizing),
  $inherit: false
) {
  $inspect: $box;

  @if $inherit {
    @at-root {
       html { @include output((box-sizing: $box)); }
       *, *:before, *:after { box-sizing: inherit; }
     }
  } @else {
    *, *:before, *:after { @include output((box-sizing: $box)); }
  }

  @include susy-inspect(global-box-sizing, $inspect);
  @include update-box-model($box);
}

// Border Box Sizing
// -----------------
// A legacy shortcut...
// - [$inherit]: true | false
@mixin border-box-sizing(
  $inherit: false
) {
  @include global-box-sizing(border-box, $inherit);
}

// Update Box Model
// ----------------
// PRIVATE: Updates global box model setting
@mixin update-box-model(
  $box
) {
  @if $box != susy-get(global-box-sizing) {
  @include susy-set(global-box-sizing, $box);
  }
}

/* scss-combine:susy/context */
// Context Syntax
// ==============

// Nested [function]
// -----------------
// Return a subset grid for nested context.
// - $context   : <span>
@function nested(
  $context
) {
  $context    : parse-span($context);
  $span       : susy-get(span, $context);
  $location   : get-location($context);
  $columns    : susy-get(columns, $context);

  @return susy-slice($span, $location, $columns);
}

// Nested [mixin]
// --------------
// Use a subset grid for a nested context
// - $context   : <span>
// - @content   : <content>
@mixin nested(
  $context
) {
  $inspect  : $context;
  $context  : parse-span($context);
  $old      : susy-get(columns);
  $susy     : map-merge($susy, (columns: nested($context))) !global;

  @include susy-inspect(nested, $inspect);
  @content;

  $susy     : map-merge($susy, (columns: $old)) !global;
}

/* scss-combine:susy/background */
// Background Grid Syntax
// ======================

$susy-overlay-grid-head-exists: false;


// Show Grid/s
// -----------
// Show grid on any element using either background or overlay.
// - [$grid]  : <settings>
@mixin show-grid(
  $grid: $susy
) {
  $inspect: $grid;
  $_output: debug-get(output, $grid);

  @include susy-inspect(show-grid, $inspect);
  @if $_output == overlay and susy-get(debug image, $grid) != hide {
    @include overlay-grid($grid);
  } @else {
    @include background-grid($grid);
  }
}

@mixin show-grids(
  $grid: $susy
) {
  @include show-grid($grid);
}

// Background Grid
// ---------------
// Show a grid background on any element.
// - [$grid]  : <settings>
@mixin background-grid(
  $grid: $susy
) {
  $inspect  : $grid;
  $_output  : get-background($grid);

  @if length($_output) > 0 {
    $_flow: susy-get(flow, $grid);

    $_image: ();
    @each $name, $layer in map-get($_output, image) {
      $_direction: if($name == baseline, to bottom, to to($_flow));
      $_image: append($_image, linear-gradient($_direction, $layer), comma);
    }
    $_output: map-merge($_output, (image: $_image));

    @include background-grid-output($_output...);
    @include susy-inspect(background-grid, $inspect);
  }
}


// Overlay Grid
// ------------
// Generate an icon to trigger grid-overlays on any given elements.
// $grids...  : <selector> [<settings>] [, <selector>]*
@mixin overlay-grid (
  $grid: $susy
) {
  @if not($susy-overlay-grid-head-exists) {
    @at-root head { @include overlay-head($grid); }
    @at-root head:before { @include overlay-trigger; }
    @at-root head:hover { @include overlay-trigger-hover; }
    $susy-overlay-grid-head-exists: true !global;
  }

  head:hover ~ &,
  head:hover ~ body & {
    position: relative;
    &:before {
      @include grid-overlay-base;
      @include background-grid($grid);
    }
  }
}


// [Private] Overlay Trigger
// -------------------------
@mixin overlay-trigger {
  content: "|||";
  display: block;
  padding: 5px 10px;
  font: {
    family: sans-serif;
    size: 16px;
    weight: bold;
  }
}


// [Private] Overlay Trigger Hover
// -------------------------------
@mixin overlay-trigger-hover {
  background: rgba(white, .5);
  color: red;
}


// [Private] Overlay Head
// ----------------------
// <head> styles to create grid overlay toggle
@mixin overlay-head (
  $grid: $susy
) {
  $_toggle: debug-get(toggle, $grid);
  $_horz: null;
  $_vert: null;

  @each $side in $_toggle {
    $_horz: if($side == left or $side == right, $side, $_horz);
    $_vert: if($side == top or $side == bottom, $side, $_vert);
  }

  display: block;
  position: fixed;
  #{$_horz}: 10px;
  #{$_vert}: 10px;
  z-index: 999;
  color: #333;
  background: rgba(white, .25);
}


// [Private] Grid Overlay Base
// ---------------------------
// Base styles for generating a grid overlay
@mixin grid-overlay-base() {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  content: " ";
  z-index: 998;
}


// Get Symmetrical Background
// --------------------------
// - $grid: <map>
@function get-background-sym(
  $grid
) {
  $grid           : parse-grid($grid);
  $_gutters       : susy-get(gutters, $grid);
  $_column-width  : susy-get(column-width, $grid);
  $_math          : susy-get(math, $grid);

  $_color         : debug-get(color);
  $_trans         : transparent;
  $_light         : lighten($_color, 15%);

  $_end           : 1 + $_gutters;
  $_after         : percentage(1/$_end);
  $_stops         : ();
  $_size          : span(1 $grid wide);

  @if is-inside($grid) {
    $_stops: $_color, $_light;
  } @else if is-split($grid) {
    $_split: $_gutters/2;
    $_before: percentage($_split/$_end);
    $_after: percentage((1 + $_split)/$_end);
    $_stops: $_trans $_before, $_color $_before, $_light $_after, $_trans $_after;
  } @else {
    $_stops: $_color, $_light $_after, $_trans $_after;
  }

  @if $_math == static {
    $_size: valid-column-math($_math, $_column-width) * $_end;
  }

  $_output: (
    image: (columns: $_stops),
    size: $_size,
  );

  @return $_output;
}


// Get Asymmetrical Inside
// -----------------------
// - $grid: <settings>
@function get-asym-inside(
  $grid
) {
  $grid     : parse-grid($grid);
  $_columns : susy-get(columns, $grid);

  $_color   : debug-get(color);
  $_light   : lighten($_color, 15%);
  $_stops   : ();

  @for $location from 1 through susy-count($_columns) {
    $this-stop: ();

    @if $location == 1 {
      $this-stop: append($this-stop, $_color, comma);
    } @else {
      $start: parse-span(1 at $location $grid);
      $start: get-isolation($start);
      $this-stop: append($this-stop, $_color $start, comma);
    }

    @if $location == susy-count($_columns) {
      $this-stop: append($this-stop, $_light, comma);
    } @else {
      $_end: parse-span(1 at ($location + 1) $grid);
      $_end: get-isolation($_end);
      $this-stop: append($this-stop, $_light $_end, comma);
    }

    $_stops: join($_stops, $this-stop, comma);
  }

  @return $_stops;
}


// Get Asymmetrical Split
// ----------------------
// - $grid: <settings>
@function get-asym-split(
  $grid
) {
  $grid     : parse-grid($grid);
  $_columns : susy-get(columns, $grid);

  $_color   : debug-get(color);
  $_light   : lighten($_color, 15%);
  $_stops   : ();

  @for $location from 1 through susy-count($_columns) {
    $this-stop: ();

    $start: parse-span(1 at $location $grid);
    $start: get-isolation($start);
    $this-stop: append($this-stop, transparent $start, comma);
    $this-stop: append($this-stop, $_color $start, comma);

    $_end: $start + span(1 at $location $grid);
    $this-stop: append($this-stop, $_light $_end, comma);
    $this-stop: append($this-stop, transparent $_end, comma);

    $_stops: join($_stops, $this-stop, comma);
  }

  @return $_stops;
}


// Get Asymmetrical Outside
// ------------------------
// - $grid: <settings>
@function get-asym-outside(
  $grid
) {
  $grid     : parse-grid($grid);
  $_columns : susy-get(columns, $grid);

  $_color   : debug-get(color);
  $_light   : lighten($_color, 15%);
  $_trans   : transparent;
  $_stops   : ();

  @for $location from 1 through susy-count($_columns) {
    $this-stop: ();

    @if $location == 1 {
      $this-stop: append($this-stop, $_color, comma);
    } @else {
      $start: parse-span(1 at $location $grid);
      $start: get-isolation($start);
      $this-stop: append($this-stop, $_color $start, comma);
    }

    @if $location == susy-count($_columns) {
      $this-stop: append($this-stop, $_light, comma);
    } @else {
      $gutter: get-span-width(first $location $grid);

      $_end: parse-span(1 at ($location + 1) $grid);
      $_end: get-isolation($_end);

      $gutter: $_light $gutter, $_trans $gutter, $_trans $_end;
      $this-stop: join($this-stop, $gutter, comma);
    }

    $_stops: join($_stops, $this-stop, comma);
  }

  @return $_stops;
}


// Get Asymmetrical Background
// ---------------------------
// - $grid: <settings>
@function get-background-asym(
  $grid
) {
  $_stops: ();

  @if is-inside($grid) {
    $_stops: get-asym-inside($grid);
  } @else if is-split($grid) {
    $_stops: get-asym-split($grid);
  } @else {
    $_stops: get-asym-outside($grid);
  }

  @return (image: (columns: $_stops));
}


// Get Background
// --------------
// - $grid: <settings>
@function get-background(
  $grid
) {
  $grid     : parse-grid($grid);
  $_show    : susy-get(debug image, $grid);
  $_return  : ();

  @if $_show and $_show != 'hide' {
    $_columns: susy-get(columns, $grid);

    @if $_show != 'show-baseline' {
      $_sym: is-symmetrical($_columns);
      $_return: if($_sym, get-background-sym($grid), get-background-asym($grid));
      $_return: map-merge($_return, (clip: content-box));
    }

    @if $_show != 'show-columns'
      and global-variable-exists(base-line-height)
      and type-of($base-line-height) == 'number'
      and not unitless($base-line-height) {
      $_color: variable-exists('grid-background-baseline-color');
      $_color: if($_color, $grid-background-baseline-color, #000);

      $_image: map-get($_return, image);
      $_size: map-get($_return, size);
      $_baseline: (baseline: ($_color 1px, transparent 1px));
      $_baseline-size: 100% $base-line-height;

      $_return: map-merge($_return, (
        image: if($_image, map-merge($_image, $_baseline), $_baseline),
        size: if($_size, ($_size, $_baseline-size), $_baseline-size),
      ));

      @if $_show == 'show' {
        $_clip: map-get($_return, clip);
        $_return: map-merge($_return, (clip: join($_clip, border-box, comma)));
      }
    } @else if $_show == 'show-baseline' {
      @warn 'Please provide a $base-line-height with the desired height and units';
    }
  }

  @if map-get($_return, image) {
    $_return: map-merge($_return, (flow: susy-get(flow, $grid)));
  }

  @return $_return;
}


// Get Debug
// ---------
// Return the value of a debug setting
// - $key: <setting>
@function debug-get(
  $key,
  $grid: $susy
) {
  $key: join(debug, $key, space);
  @return susy-get($key, $grid);
}

/* scss-combine:susy/container */
// Container Syntax
// ================

// Container [mixin]
// -----------------
// Set a container element
// - [$layout]  : <settings>
@mixin container(
  $layout: $susy
) {
  $inspect    : $layout;
  $layout     : parse-grid($layout);

  $_width     : get-container-width($layout);
  $_justify   : parse-container-position(susy-get(container-position, $layout));
  $_property  : if(susy-get(math, $layout) == static, width, max-width);

  $_box       : susy-get(box-sizing, $layout);

  @if $_box {
    @include output((box-sizing: $_box));
  }

  @include susy-inspect(container, $inspect);
  @include float-container($_width, $_justify, $_property);
  @include show-grid($layout);
}

// Container [function]
// --------------------
// Return container width
// - [$layout]  : <settings>
@function container(
  $layout: $susy
) {
  $layout: parse-grid($layout);
  @return get-container-width($layout);
}

// Get Container Width
// -------------------
// Calculate the container width
// - [$layout]: <settings>
@function get-container-width(
  $layout: $susy
) {
  $layout         : parse-grid($layout);
  $_width         : susy-get(container, $layout);
  $_column-width  : susy-get(column-width, $layout);
  $_math          : susy-get(math, $layout);

  @if not($_width) or $_width == auto {
    @if valid-column-math($_math, $_column-width) {
      $_columns   : susy-get(columns, $layout);
      $_gutters   : susy-get(gutters, $layout);
      $_spread    : if(is-split($layout), wide, narrow);
      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;
    } @else {
      $_width: 100%;
    }
  }

  @return $_width;
}

// Parse Container Position
// ------------------------
// Parse the $container-position into margin values.
// - [$justify]   : left | center | right | <length> [<length>]
@function parse-container-position(
  $justify: map-get($susy-defaults, container-position)
) {
  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);

  @if not(index(left right center, $justify)) {
    $_return: nth($justify, 1);
    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);
  }

  @return $_return;
}

/* scss-combine:susy/span */
// Span Syntax
// ===========

// Span [mixin]
// ------------
// Set a spanning element using shorthand syntax.
// - $span  : <span>
@mixin span(
  $span
) {
  $inspect: $span;
  $span: parse-span($span);
  $output: span-math($span);
  $nesting: susy-get(span, $span);
  $clear: susy-get(clear, $span);

  $box: susy-get(box-sizing, $span);
  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);
  $box: $box or if(is-inside($span) and $content-box, border-box, null);

  @if $clear == break {
    @include break;
  } @else if $clear == nobreak {
    @include nobreak;
  }

  @include susy-inspect(span, $inspect);
  @include output((box-sizing: $box));
  @include float-span-output($output...);

  @if valid-columns($nesting, silent) {
    @include nested($span) { @content; }
  } @else {
    @content;
  }
}

// Span [function]
// ---------------
// Return the width of a span.
// - $span  : <span>
@function span(
  $span
) {
  @return get-span-width($span);
}

// Span Math
// ---------
// Get all the span results.
// - $span: <map>
@function span-math(
  $span
) {
  $nest             : if(susy-get(role, $span) == nest, true, false);
  $split-nest       : if(is-split($span) and $nest, true, false);
  $edge             : get-edge($span);
  $location         : get-location($span);

  $float            : from;
  $padding-before   : null;
  $padding-after    : null;
  $margin-before    : null;
  $margin-after     : null;

  // calculate widths
  $spread: index(map-values($span), spread);
  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);
  $width: get-span-width($span);
  $gutters: get-gutters($span);

  // apply gutters
  @if is-inside($span) {
    @if not(susy-get(role, $span)) {
      $padding-before: map-get($gutters, before);
      $padding-after: map-get($gutters, after);
    }
  } @else {
    @if not($split-nest) {
      $margin-before: map-get($gutters, before);
      $margin-after: map-get($gutters, after);
    }
  }

  // special margin handling
  @if susy-get(output, $span) == isolate and $location {
    $margin-before: get-isolation($span);
    $margin-after: -100%;
  } @else if $edge {
    $is-split: is-split($span);
    $pos: susy-get(gutter-position, $span);

    @if $edge == last {
      $float: susy-get(last-flow, $span);
    }

    @if not($is-split) {
      @if $edge == full or ($edge == first and $pos == before) {
        $margin-before: 0;
      }
      @if $edge == full or ($edge == last and $pos == after) {
        $margin-after: 0;
      }
    }

  }

  @return (
    width           : $width,
    float           : $float,
    margin-before   : $margin-before,
    margin-after    : $margin-after,
    padding-before  : $padding-before,
    padding-after   : $padding-after,
    flow            : susy-get(flow, $span),
  );
}

// Get Span Width
// --------------
// Return span width.
// - $span: <map>
@function get-span-width(
  $span
) {
  $span     : parse-span($span);

  $n        : susy-get(span, $span);
  $location : get-location($span);
  $columns  : susy-get(columns, $span);
  $gutters  : susy-get(gutters, $span);
  $spread   : susy-get(spread, $span);

  $context  : null;
  $span-sum : null;
  $width    : null;

  @if $n == 'full' {
    $pos: susy-get(gutter-position, $span);
    $role: susy-get(role, $span);
    $n: if($pos == split and $role != nest, susy-count($columns), 100%);
  }

  @if type-of($n) != number {
    @warn "(#{type-of($n)}) #{$n} is not a valid span.";
  } @else if unitless($n) {
    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));
    $spread: if(is-inside($span), $spread or wide, $spread);
    $span-sum: susy($n, $location, $columns, $gutters, $spread);

    $_math: susy-get(math, $span);
    $_column-width: susy-get(column-width, $span);
    @if $_math == static {
      $width: $span-sum * valid-column-math($_math, $_column-width);
    } @else {
      $width: percentage($span-sum / $context);
    }
  } @else {
    $width: $n;
  }

  @return $width;
}

/* scss-combine:susy/gutters */
// Gutter Syntax
// =============


// Gutters
// -------
// Set gutters on an element.
// - [$span]   : <settings>
@mixin gutters(
  $span: $susy
) {
  $inspect  : $span;
  $span     : parse-gutters($span);
  $_gutters : get-gutters($span);

  $_output: (
    before: map-get($_gutters, before),
    after: map-get($_gutters, after),
    flow: susy-get(flow, $span),
  );

  @include susy-inspect(gutters, $inspect);

  @if is-inside($span) {
    @include padding-output($_output...);
  } @else {
    @include margin-output($_output...);
  }
}

@mixin gutter(
  $span: $susy
) {
  @include gutters($span);
}


// Gutter
// ------
// Return the width of a gutter.
// - [$span]   : <settings>
@function gutter(
  $span: $susy
) {
  $span: parse-gutters($span);

  $_gutters: get-gutters($span);
  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);

  @return $_gutters;
}

@function gutters(
  $span: $susy
) {
  @return gutter($span);
}


// Get Gutter Width
// ----------------
// Return gutter width.
// - [$context]: <context>
@function get-gutter-width(
  $context: $susy
) {
  $context  : parse-gutters($context);

  $_gutters : susy-get(gutters, $context);
  $_gutter  : susy-get(gutter-override, $context);

  @if $_gutters and ($_gutters > 0) and not($_gutter) {
    $_column-width: susy-get(column-width, $context);
    $_math: gutter-math($context);
    @if $_math == static {
      $_gutter: $_gutters * valid-column-math($_math, $_column-width);
    } @else {
      $_columns : susy-get(columns, $context);
      $_spread  : if(is-split($context), wide, susy-get(spread, $context));
      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));
    }
  }

  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);

  @return $_gutter;
}


// Get Gutters
// -----------
// Return before and after gutter values.
// - [$context]: <context>
@function get-gutters(
  $context: $susy
) {
  $context            : parse-gutters($context);

  $_gutter-position   : susy-get(gutter-position, $context);
  $_gutter            : get-gutter-width($context);

  $_return            : (before: null, after: null);

  @if is-split($context) and $_gutter {
    $_gutter: $_gutter / 2;
    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));
  } @else {
    $_return: map-merge($_return, ($_gutter-position: $_gutter));
  }

  @return $_return;
}


// Is Inside
// ---------
// Returns true if gutters are inside.
// $context: <context>
@function is-inside(
  $context
) {
  $_inside: inside inside-static;
  $_gutter-position: susy-get(gutter-position, $context);

  @return if(index($_inside, $_gutter-position), true, false);
}


// Is Split
// --------
// Returns true if gutters are split.
// $context: <context>
@function is-split(
  $context
) {
  $_split: split inside inside-static;
  $_gutter-position: susy-get(gutter-position, $context);

  @return if(index($_split, $_gutter-position), true, false);
}


// Gutter Math
// -----------
// Return the math to use for gutter calculations
// $context: <context>
@function gutter-math(
  $context: $susy
) {
  $_return  : susy-get(math, $context);
  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);

  @return $_return;
}

/* scss-combine:susy/isolate */
// Isolation Syntax
// ================


// Isolate [Mixin]
// ---------------
// Set isolation as an override.
// - $location: <span>
@mixin isolate(
  $isolate: 1
) {
  $inspect: $isolate;

  $output: (
    push: isolate($isolate),
    flow: susy-get(flow, $isolate),
  );

  @include susy-inspect(isolate, $inspect);
  @include isolate-output($output...);
}


// Isolate [function]
// ------------------
// Return an isolation offset width.
// - $location: <span>
@function isolate(
  $isolate: 1
) {
  $isolate: parse-span($isolate);
  $isolation: susy-get(span, $isolate);

  @if $isolation and not(get-location($isolate)) {
    $new: (
      span: null,
      location: $isolation,
    );
    $isolate: map-merge($isolate, $new);
  }

  @return get-isolation($isolate);
}


// Get Isolation
// -------------
// Return the isolation offset width
// - $input: <map>
@function get-isolation(
  $input
) {
  $location   : get-location($input);
  $columns    : susy-get(columns, $input);
  $width      : null;

  @if type-of($location) == number and not(unitless($location)) {
    $width: $location;
  } @else if $location {
    $push: $location - 1;
    @if $push > 0 {
      $push: map-merge($input, (
        span: $push,
        location: 1,
        spread: wide,
      ));
      $width: get-span-width($push);
    }
  }

  @if susy-get(gutter-position, $input) == split
      and susy-get(gutters, $input) > 0 {
    $width: if($width == null, gutters($input), $width + gutters($input));
  }

  @return $width or 0;
}

/* scss-combine:susy/gallery */
// Gallery Syntax
// ==============

// Gallery
// -------
// Create an isolated gallery
// - $span        : <span>
// - [$selector]  : child | of-type
@mixin gallery(
  $span,
  $selector: child
) {
  $inspect    : $span;
  $span       : parse-span($span);
  $span       : map-merge($span, (location: 1));

  $n            : susy-get(span, $span);
  $columns      : susy-get(columns, $span);
  $context      : susy-count($columns);
  $flow         : susy-get(flow, $span);

  $inside       : is-inside($span);
  $from         : from($flow);
  $line         : floor($context / $n);
  $symmetrical  : is-symmetrical($columns);

  $output: (
    width             : null,
    float             : from,
    margin-before     : null,
    margin-after      : null,
    padding-before    : null,
    padding-after     : null,
    flow              : $flow,
  );

  @if $inside {
    $gutters: get-gutters($span);
    $output: map-merge($output, (
      padding-before: map-get($gutters, before),
      padding-after: map-get($gutters, after),
    ));
  }

  @if $symmetrical {
    $output: map-merge($output, (width: get-span-width($span)));
  }

  $box          : susy-get(box-sizing, $span);
  $global-box   : if(susy-get(global-box-sizing) == 'border-box', true, false);

  @include susy-inspect(gallery, $inspect);

  // Collective Output
  @if $box == border-box or ($inside and not($box) and not($global-box)) {
    @include output((box-sizing: border-box));
  } @else if $box == content-box {
    @include output((box-sizing: content-box));
  }

  @include float-span-output($output...);

  // Individual Loop
  @for $item from 1 through $line {
    $nth: '#{$line}n + #{$item}';
    &:nth-#{$selector}(#{$nth}) {
      // Individual Prep
      $output: (
        width             : if($symmetrical, null, get-span-width($span)),
        float             : null,
        margin-before     : get-isolation($span),
        margin-after      : -100%,
        padding-before    : null,
        padding-after     : null,
        flow              : $flow,
      );

      // Individual Output
      @include float-span-output($output...);

      @if get-edge($span) == first {
        @include break;
        @include first($span);
      } @else {
        @include nobreak;
      }

      // Individual Location Increment
      $location: get-location($span) + $n;
      $location: if($location > $context, 1, $location);
      $span: map-merge($span, (location: $location));
    }
  }
}

/* scss-combine:susy/rows */
// Row Start & End
// ===============

// Break
// -----
// Apply to any element that should force a line break.
@mixin break {
  @include output((clear: both));
}


// NoBreak
// -------
// Cancel the break() effect, e.g. when using media queries.
@mixin nobreak {
  @include output((clear: none));
}


// Full
// ----
// - [$context]: <layout shorthand>
@mixin full(
  $context: $susy
) {
  $inspect : $context;
  @include susy-inspect(full, $inspect);
  @include span(full of parse-grid($context) break);
}


// First
// -----
// - [$context]: <settings>
@mixin first(
  $context: $susy
) {
  $inspect  : $context;
  $context  : parse-grid($context);
  $flow     : susy-get(flow, $context);

  @include susy-inspect(first, $inspect);
  @if not(is-split($context)) {
    @include float-first($flow);
  }
}

@mixin alpha(
  $context: $susy
) {
  @include first($context);
}


// Last
// ----
// - [$context]: <settings>
@mixin last(
  $context: $susy
) {
  $inspect  : $context;
  $context  : parse-grid($context);

  @include susy-inspect(last, $inspect);

  $output: (
    flow: susy-get(flow, $context),
    last-flow: susy-get(last-flow, $context),
    margin: if(is-split($context), null, 0),
  );

  @include float-last($output...);
}

@mixin omega(
  $context: $susy
) {
  @include last($context);
}


// Get Edge
// --------
// Calculate edge value based on location, if possible
@function get-edge(
  $span
) {
  $span       : parse-span($span);
  $edge       : susy-get(edge, $span);

  @if not($edge) {
    $count: susy-count(susy-get(columns, $span));
    $location: susy-get(location, $span);
    $n: susy-get(span, $span);

    $number: if(type-of($location) == number, true, false);
    $index: if($number and unitless($location), true, false);

    @if $n == $count {
      $edge: full;
    } @else if $location and $n and $index {
      @if $location == 1 {
        $edge: if($n == $count, full, first);
      } @else if $location + $n - 1 == $count {
        $edge: last;
      }
    }
  }

  @if $edge == alpha or $edge == omega {
    $edge: if($edge == alpha, first, last);
  }

  @return $edge;
}


// Get Location
// ------------
// Calculate location value based on edge, if possible
@function get-location(
  $span
) {
  $span       : parse-span($span);
  $location   : susy-get(location, $span);
  $edge       : get-edge($span);
  $n          : susy-get(span, $span);

  @if $edge and not($location) and type-of($n) == number and unitless($n) {
    @if $edge == first {
      $location: 1;
    } @else if $edge == last {
      $location: susy-count(susy-get(columns, $span)) - $n + 1;
    }
  }

  @return $location
}

/* scss-combine:susy/margins */
// Margin Syntax
// =============

// Pre
// ---
// Add spanning-margins before an element.
// - $span  : <span>
@mixin pre(
  $span
) {
  $inspect: $span;
  $span   : map-merge((spread: wide), parse-span($span));
  $flow   : susy-get(flow, $span);
  $split  : if(susy-get(gutter-position, $span) == split, true, false);
  $gutter : gutter($span);
  $span   : span($span);
  $width  : if($split and $gutter, $span + $gutter, $span);

  @include susy-inspect(pre, $inspect);
  @include margin-output($width, null, $flow);
}

// Post
// ----
// Add spanning-margins after an element.
// - $span  : <span>
@mixin post(
  $span
) {
  $inspect  : $span;
  $span     : map-merge((spread: wide), parse-span($span));
  $flow     : susy-get(flow, $span);
  $split    : if(susy-get(gutter-position, $span) == split, true, false);
  $width    : if($split, span($span) + gutter($span), span($span));

  @include susy-inspect(post, $inspect);
  @include margin-output(null, $width, $flow);
}

// Push
// ----
// Simple synonymn for pre.
// - $span  : <span>
@mixin push(
  $span
) {
  @include pre($span);
}

// Pull
// ----
// Add negative spanning-margins before an element.
// - $span  : <span>
@mixin pull(
  $span
) {
  $inspect  : $span;
  $span     : map-merge((spread: wide), parse-span($span));
  $flow     : susy-get(flow, $span);
  $split    : if(susy-get(gutter-position, $span) == split, true, false);
  $width    : if($split, 0 - span($span) + gutter($span), 0 - span($span));

  @include susy-inspect(pull, $inspect);
  @include margin-output($width, null, $flow);
}

// Squish
// ------
// Add spanning-margins before and after an element.
// - $pre     : <span>
// - [$post]  : <span>
@mixin squish(
  $pre,
  $post: false
) {
  $inspect      : ($pre, $post);
  $pre          : map-merge((spread: wide), parse-span($pre));

  @if $post {
    $post: map-merge((spread: wide), parse-span($post));
  } @else {
    $span: susy-get(span, $pre);
    @if length($span) > 1 {
      $pre: map-merge($pre, (span: nth($span, 1)));
      $post: map-merge($pre, (span: nth($span, 2)));
    } @else {
      $post: $pre;
    }
  }

  @include susy-inspect(squish, $inspect);
  @include pre($pre);
  @include post($post);
}

/* scss-combine:susy/padding */
// Padding Syntax
// ==============

// Prefix
// ------
// Add spanning-padding before an element.
// - $span  : <span>
@mixin prefix(
  $span
) {
  $inspect  : $span;
  $span     : map-merge((spread: wide), parse-span($span));
  $flow     : susy-get(flow, $span);
  $width    : span($span);

  @if is-inside($span) {
    $gutter: gutter($span);
    $width: if($gutter and comparable($width, $gutter), $width + $gutter, $width);
  }

  @include susy-inspect(prefix, $inspect);
  @include padding-output($width, null, $flow);
}

// Suffix
// ------
// Add spanning-padding after an element.
// - $span  : <span>
@mixin suffix(
  $span
) {
  $inspect  : $span;
  $span     : map-merge((spread: wide), parse-span($span));
  $flow     : susy-get(flow, $span);
  $width    : span($span);

  @if is-inside($span) {
    $gutter: gutter($span);
    $width: if($gutter and comparable($width, $gutter), $width + $gutter, $width);
  }

  @include susy-inspect(suffix, $inspect);
  @include padding-output(null, $width, $flow);
}

// Pad
// ---
// Add spanning-padding before and after an element.
// - $pre     : <span>
// - [$post]  : <span>
@mixin pad(
  $pre,
  $post: false
) {
  $inspect  : ($pre, $post);
  $pre      : map-merge((spread: wide), parse-span($pre));

  @if $post {
    $post: map-merge((spread: wide), parse-span($post));
  } @else {
    $span: susy-get(span, $pre);
    @if length($span) > 1 {
      $pre: map-merge($pre, (span: nth($span, 1)));
      $post: map-merge($pre, (span: nth($span, 2)));
    } @else {
      $post: $pre;
    }
  }

  @include susy-inspect(pad, $inspect);
  @include prefix($pre);
  @include suffix($post);

}

/* scss-combine:susy/bleed */
// Bleed Syntax
// ============

// Bleed
// -----
// Add negative margins, and equal positive padding to create bleed.
// - $bleed  : <span>
@mixin bleed(
  $bleed: 0 gutter()
) {
  $inspect  : $bleed;
  $output   : get-bleed($bleed);

  @if susy-get(global-box-sizing) != content-box {
    $output: map-merge((box-sizing: content-box), $output);
  }

  @include susy-inspect(bleed, $inspect);
  @include output($output);
}


// Bleed-x
// -------
// Shortcut for horizontal bleed.
// - $bleed  : <span>
@mixin bleed-x(
  $bleed: gutter()
) {
  $bleed  : parse-span($bleed);
  $trbl   : susy-get(span, $bleed);

  @if length($trbl) == 1 {
    $bleed: map-merge($bleed, (span: 0 nth($trbl, 1)));
  } @else if length($trbl) == 2 {
    $bleed: map-merge($bleed, (span: 0 nth($trbl, 2) 0 nth($trbl, 1)));
  } @else {
    @warn 'bleed-x only takes 2 lengths, but #{length($trbl)} were passed.';
  }

  @include bleed($bleed);
}


// Bleed-y
// -------
// Shortcut for vertical bleed.
// - $bleed  : <span>
@mixin bleed-y(
  $bleed: if(function-exists(rhythm), rhythm(1), 1em)
) {
  $bleed  : parse-span($bleed);
  $trbl   : susy-get(span, $bleed);

  @if length($trbl) == 1 {
    $bleed: map-merge($bleed, (span: nth($trbl, 1) 0));
  } @else if length($trbl) == 2 {
    $bleed: map-merge($bleed, (span: nth($trbl, 1) 0 nth($trbl, 2) 0));
  } @else {
    @warn 'bleed-y only takes 2 lengths, but #{length($trbl)} were passed.';
  }

  @include bleed($bleed);
}


// Get Bleed
// ---------
// Return bleed output values
// - $bleed: <span>
@function get-bleed(
  $bleed
) {
  $bleed    : map-merge((spread: wide), parse-span($bleed));
  $trbl     : susy-get(span, $bleed);
  $short    : null;
  $output   : ();

  @for $i from 1 through length($trbl) {
    $this: nth($trbl, $i);
    $new: ();
    $margin: null;
    $padding: null;
    $padding-x: null;

    @if $this > 0 {
      $this: map-merge($bleed, (span: $this));
      $margin: span($this);
      $padding: $margin;
      $padding-x: $padding;
    }

    @if $margin and $margin > 0 {
      $margin: - $margin;

      @if is-inside($this) {
        $gutter: gutter($this);
        $join: if($gutter and comparable($padding, $gutter), true, false);
        $padding-x: if($join and $padding > 0, $padding + $gutter, $padding);
      }
    }

    @if $i == 1 {
      $new: (
        margin-top: $margin,
        padding-top: $padding,
        margin-right: $margin,
        padding-right: $padding-x,
        margin-bottom: $margin,
        padding-bottom: $padding,
        margin-left: $margin,
        padding-left: $padding-x,
      );
    } @else if $i == 2 {
      $new: (
        margin-right: $margin,
        padding-right: $padding-x,
        margin-left: $margin,
        padding-left: $padding-x,
      );
    } @else if $i == 3 {
      $new: (
        margin-bottom: $margin,
        padding-bottom: $padding,
      );
    } @else if $i == 4 {
      $new: (
        margin-left: $margin,
        padding-left: $padding-x,
      );
    }

    $output: map-merge($output, $new);
  }

  @each $prop, $value in $output {
    $output: if($value == 0, map-merge($output, ($prop: null)), $output);
  }

  @return bleed-shorthand($output);
}

// Bleed Shorthand
// ---------------
// Convert bleed output into shorthand when possible.
// - $bleed: <output map>
@function bleed-shorthand(
  $bleed
) {
  $margin: ();
  $padding: ();
  $return: ();

  @each $key, $value in $bleed {
    @if str-index($key, margin) {
      $margin: map-merge($margin, ($key: $value));
    } @else if str-index($key, padding) > 0 {
      $padding: map-merge($padding, ($key: $value));
    }
  }

  $props: (
    margin: $margin,
    padding: $padding,
  );

  @each $name, $map in $props {
    $four: if(length(map-keys($map)) == 4, true, false);
    $null: if(index(map-values($map), null), true, false);

    @if $four and not($null) {
      $top: map-get($map, '#{$name}-top');
      $right: map-get($map, '#{$name}-right');
      $bottom: map-get($map, '#{$name}-bottom');
      $left: map-get($map, '#{$name}-left');

      $tb: if($top == $bottom, $top, null);
      $rl: if($right == $left, $right, null);
      $all: if($tb == $rl, $tb, null);

      $new: if($all, $all, null);

      @if not($new) {
        @if $tb and $rl {
          $new: $tb $rl;
        } @else if $rl {
          $new: $top $rl $bottom;
        } @else {
          $new: $top $right $bottom $left;
        }
      }

      $return: map-merge($return, ($name: $new));
    } @else {
      $return: map-merge($return, $map);
    }
  }

  @return $return;
}

/* scss-combine:susy/breakpoint-plugin */
// Breakpoint Integration
// ======================

$susy-media: () !default;
$susy-media-fallback: false !default;

$_susy-media-context: ();


// Susy Breakpoint
// ---------------
// Change grids at different media query breakpoints.
// - $query     : <min-width> [<max-width>] | <property> <value> | <map>
// - $layout    : <settings>
// - $no-query  : <boolean> | <selector>
@mixin susy-breakpoint(
  $query,
  $layout: false,
  $no-query: $susy-media-fallback
) {
  @include susy-media-router($query, $no-query) {
    @if $layout {
      @include with-layout($layout) {
        @content;
      }
    } @else {
      @content;
    }
  }
}


// Susy Media
// ----------
// - $query: <min-width> [<max-width>] | <property> <value>
// - $no-query: <boolean> | <selector>
@mixin susy-media(
  $query,
  $no-query: $susy-media-fallback
) {
  $old-context: $_susy-media-context;
  $name: if(map-has-key($susy-media, $query), $query, null);
  $query: susy-get-media($query);
  $query: susy-parse-media($query);

  @include susy-media-context($query, $name);

  @if $no-query and type-of($no-query) != string {
    @content;
  } @else {
    @media #{susy-render-media($query)} {
      @content;
    }

    @if type-of($no-query) == string {
      #{$no-query} & {
        @content;
      }
    }
  }

  @include susy-media-context($old-context, $clean: true);
}


// Media Router
// ------------
// Rout media arguments to the correct mixin.
@mixin susy-media-router(
  $query,
  $no-query: $susy-media-fallback
) {
  @if susy-support(breakpoint, (mixin: breakpoint), $warn: false) {
    @include breakpoint($query, $no-query) {
      @content;
    }
  } @else {
    @include susy-media($query, $no-query) {
      @content;
    }
  }
}


// Update Context
// -------------
// Set the new media context
@mixin susy-media-context(
  $query,
  $name: null,
  $clean: false
) {
  $query: map-merge((name: $name), $query);

  @if $clean {
    $_susy-media-context: $query !global;
  } @else {
    $_susy-media-context: map-merge($_susy-media-context, $query) !global;
  }
}


// Media Context
// -------------
// Return the full media context, or a single media property (e.g. min-width)
@function susy-media-context(
  $property: false
) {
  @if $property {
    @return map-get($_susy-media-context, $property);
  } @else {
    @return $_susy-media-context;
  }
}


// Get Media
// ---------
// Return a named media-query from $susy-media.
// - $name: <key>
@function susy-get-media(
  $name
) {
  @if map-has-key($susy-media, $name) {
    $map-value: map-get($susy-media, $name);
    @if ($name == $map-value) {
      $name: $map-value;
    } @else {
      $name: susy-get-media($map-value);
    }
  }

  @return $name;
}


// Render Media
// ------------
// Build a media-query string from various media settings
@function susy-render-media(
  $query
) {
  $output: null;
  @each $property, $value in $query {
    $string: null;

    @if $property == media {
      $string: $value;
    } @else {
      $string: '(#{$property}: #{$value})';
    }

    $output: if($output, '#{$output} and #{$string}', $string);
  }

  @return $output;
}


// Parse Media
// -----------
// Return parsed media-query settings based on shorthand
@function susy-parse-media(
  $query
) {
  $mq: null;
  @if type-of($query) == map {
    $mq: $query;
  } @else if type-of($query) == number {
    $mq: (min-width: $query);
  } @else if type-of($query) == list and length($query) == 2 {
    @if type-of(nth($query, 1)) == number {
      $mq: (
        min-width: min($query...),
        max-width: max($query...),
      );
    } @else {
      $mq: (nth($query, 1): nth($query, 2));
    }
  } @else {
    $mq: (media: '#{$query}');
  }

  @return $mq;
}




// Variables
/* scss-combine:vars/colors */
$white: rgb(255,255,255);
$black: rgb(0,0,0);

$body-background-color: $white;
$shadow-color: rgba($black,0.14);

$body-color: stencilColor("body_color");
$navigation-color: stencilColor("navigation_color");
$header-color: stencilColor("header_color");

$primary-color: stencilColor("primary_color");

$accent-color: stencilColor("accent_color");
$border-color: stencilColor("border_color");

$navigation-hover: mix($navigation-color, $accent-color, 50%);

$input-background-color: stencilColor("input_background_color");
$input-color: stencilColor("input_color");
$input-border-color: stencilColor("input_border_color");

$page-background-color: stencilColor("page_background_color");
$banner-background-color: stencilColor("banner_background_color");
$banner-link-color: stencilColor("banner_link_color");

$heading-color: stencilColor("heading_color");

$footer-background-color: stencilColor("footer_background_color");
$footer-color: stencilColor("footer_color");

$section-title-color: stencilColor("section_title_color");

$highlight-color: stencilColor("highlight_color");
$star-color: stencilColor("star_color");

$primary-button-background-color: stencilColor("primary_button_background_color");
$primary-button-color: $white;

$secondary-button-color: $primary-color;

$disabled-button-background: darken($input-background-color, 10%);
$disabled-button-color: lighten($input-color, 30%);

$lighter-text: lighten($body-color, 6.5%);
$lightest-text: lighten($body-color, 20%);

$error-color: stencilColor("error_color");

$promo-color: stencilColor("promo_color");

$mosaic-text-color: stencilColor("mosaic_text_color");
$mosaic-button-text: stencilColor("mosaic_button_text");
$mosaic-button-background: stencilColor("mosaic_button_background");

$select-border-color: #e6e6e6;
$select-border-active: darken($select-border-color, 10%);
$check-border-color: #bbbbbb;

$breadcrumb-background-color: #f8f8f8;

$placeholder-image-background: lighten($black, 75%);

$alert-success: #54ca83;
$alert-error: #de5949;
$alert-info: #a6a6a6;

/* scss-combine:vars/grid */
// Susy grid settings

$susy: (
  columns: 12,
  gutters: 0.6,
  math: fluid,
  output: float,

  debug: (
    image: hide,
    output: background,
  ),
);

$grid-small: (
  columns: 12,
  gutters: 0.3,

  debug: (
    image: hide,
    output: background,
  ),
);

$product: (
  columns: 16,
  gutters: 1,

  debug: (
    image: hide,
    output: background,
  ),
);

$cart-preview: (
  columns: 12,
  gutters: 1.5,

  debug: (
    image: hide,
    output: background,
  ),
);

$mobile-links: (
  columns: 3,
  gutters: 0.03,
  gutter-position: before,
);

/* scss-combine:vars/typography */
$primary-font: stencilFontFamily("primary-font");
$secondary-font: stencilFontFamily("secondary-font");
$mono-font: "Monaco", "Consolas", "Lucida Console", monospace;

$body-font: $secondary-font;

$heading-font: $primary-font;
$heading-weight: 700;
$button-weight: 700;

$main-navigation-font: if(stencilString("main_navigation_font") == "primary", $primary-font, $secondary-font);
$footer-navigation-font: if(stencilString("footer_navigation_font") == "primary", $primary-font, $secondary-font);
$price-font: if(stencilString("price_font") == "primary", $primary-font, $secondary-font);
$button-font: if(stencilString("button_font") == "primary", $primary-font, $secondary-font);

$navigation-text-transform: stencilString("navigation_text_transform");

/* scss-combine:vars/variables */
// Z-index from http://www.smashingmagazine.com/2014/06/sassy-z-index-management-for-complex-layouts/

$elements: product-item-options, product-item-quickshop, blog-image, blog-title, cart-preview, branding, compare-tab, mosaic, primary-navigation, dropdown, active-dropdown, main-header, mobile-nav-mask;

// Sizes

$primary-navigation-height: 80px;
$mobile-navbar-height: 48px;
$mobile-nav-tools-height: 45px;

// Background Image
$site-background-image: stencilString("site_background_image");

$footer-alt-opacity: 0.55;


// Library
/* scss-combine:lib/mixins */
$max-width: 1300px;
$font-size: 13px;
$gutter: 15px;
$ease-out-quad: cubic-bezier(0.250,0.460,0.450,0.940);

//Breakpoints. These are the low value of the range

$medium: 768px;
$large: 992px;
$xlarge: 1160px;

@mixin breakpoint($point) {
  @if $point == s {
    @include media($max: $medium) { @content; }
  }
  @if $point == m {
    @include media($max: $large) { @content; }
  }
  @if $point == m-only {
    @include media($min: $medium, $max: $large) { @content; }
  }
  @if $point == m-up {
    @include media($min: $medium) { @content; }
  }
  @if $point == l {
    @include media($max: $xlarge) { @content; }
  }
  @if $point == l-only {
    @include media($min: $large, $max: $xlarge) { @content; }
  }
  @if $point == l-up {
    @include media($min: $large) { @content; }
  }
  @if $point == xl-up {
    @include media($min: $xlarge) { @content; }
  }
}

@mixin antialias($font-color) {
  @if (lightness($font-color) > 50) {
    -moz-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -o-font-smoothing: antialiased;
    -webkit-font-smoothing: antialiased;
  }
}

// Maintain Aspect Ratio
@mixin maintain-ratio($ratio: 1 1) {
  @if length($ratio) < 2 or length($ratio) > 2 {
    @warn "$ratio must be a list with two values.";
  }

  $width: 100%;
  $height: percentage(nth($ratio, 2) / nth($ratio, 1));

  width: $width;
  height: 0;
  padding-bottom: $height;
}

/* scss-combine:lib/extends */
%heading-text-treatment {
  font-family: $heading-font;
  font-weight: $heading-weight;
  color: $heading-color;
  line-height: 1.45;
}

%section-title-text-treatment {
  font-family: $heading-font;
  font-weight: $heading-weight;
  color: $section-title-color;
}

%center {
  text-align: center;
}

%full-width {
  margin: ($gutter * 3) ($gutter * 2) ($gutter * 4);

  @include breakpoint(m) {
    padding-right: $gutter;
    padding-left: $gutter;
    margin-top: $gutter * 2;
    margin-bottom: $gutter * 2;
  }
}

%content-padding {
  padding-right: $gutter * 4;
  padding-left: $gutter * 4;

  @include breakpoint(l-only) {
    padding-right: $gutter * 2;
    padding-left: $gutter * 2;
  }

  @include breakpoint(m) {
    padding-right: $gutter;
    padding-left: $gutter;
  }
}

%background-position-svg {
  background-position: 50% 50%;
  background-repeat: no-repeat;
  background-size: contain;
}

%antialiased {
  -moz-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -o-font-smoothing: antialiased;
  -webkit-font-smoothing: antialiased;
}

%button-reset {
  padding: 0;
  background: transparent;
  border: 0;
  appearance: normal;

  &:focus {
    outline: none;
  }
}

/* scss-combine:lib/functions */
// Optimize SVG url from http://codepen.io/jakob-e/pen/doMoML
@function svg-url($svg){
  //  Chunk up string in order to avoid "stack level too deep" error
  $encoded:'';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    //   Encode (may need a few extra replacements)
    $chunk: str-replace($chunk,'"','\'');
    $chunk: str-replace($chunk,'<','%3C');
    $chunk: str-replace($chunk,'>','%3E');
    $chunk: str-replace($chunk,'&','%26');
    $chunk: str-replace($chunk,'#','%23');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

/* scss-combine:lib/icons */
// todo: try to use sprites instead. convert to @extends where possible.

// SVGs
@mixin svg-background($size:"") {
  @extend %background-position-svg;

  @if $size != "" {
    //scss-lint:disable ImportantRule
    background-size: $size !important;
  }

  display: inline-block;
  content: "";
}

@mixin icon-arrow-down($fill-color, $size:"") {
  @include svg-background($size);
  background-image: svg-url('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="26" height="26" viewBox="0 0 26 26"><path fill="#{$fill-color}" d="M0.867 4.911l12.133 16.178 12.133-16.178h-24.267z"></path></svg>');
}

@mixin icon-chevron-left($fill-color, $size:"") {
  @include svg-background($size);
  background-image: svg-url('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="26" height="26" viewBox="0 0 26 26"><path fill="#{$fill-color}" d="M19.985 23.010l-11-11v1.98l11-11-1.98-1.98-11.99 11.99 11.99 11.99 1.98-1.98z"></path></svg>');
}

@mixin icon-chevron-right($fill-color, $size:"") {
  @include svg-background($size);
  background-image: svg-url('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="26" height="26" viewBox="0 0 26 26"><path fill="#{$fill-color}" d="M7.995 24.99l11.99-11.99-11.99-11.99-1.98 1.98 11 11v-1.98l-11 11 1.98 1.98z"></path></svg>');
}

@mixin button-bg() {
  background-image: svg-url('<svg version="1.1" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 40 40"><polygon fill="#{rgba($black, 0.15)}" points="0,36 40,4 40,40 0,40 "/></svg>');
  background-repeat: no-repeat;
  background-size: 100%;
}

@mixin checkbox-unchecked($fill-color: $check-border-color, $size:"") {
  @include svg-background($size);
  background-image: svg-url('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="26" height="26" viewBox="0 0 26 26"><path fill="#{$fill-color}" d="M2.364 4.721v0 16.557c0 1.303 1.056 2.358 2.358 2.358h16.557c1.303 0 2.358-1.056 2.358-2.358v-16.557c0-1.303-1.056-2.358-2.358-2.358h-16.557c-1.303 0-2.358 1.056-2.358 2.358v0zM0 4.721v0c0-2.608 2.113-4.721 4.721-4.721h16.557c2.608 0 4.721 2.113 4.721 4.721v16.557c0 2.608-2.113 4.721-4.721 4.721h-16.557c-2.608 0-4.721-2.113-4.721-4.721v-16.557z"></path></svg>');
}

@mixin checkbox-checked($fill-color: $primary-color, $size:"") {
  @include svg-background($size);
  background-image: svg-url('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="26" height="26" viewBox="0 0 26 26"><path fill="#{$fill-color}" d="M0 4.721v0c0-2.608 2.113-4.721 4.721-4.721h16.557c2.608 0 4.721 2.113 4.721 4.721v16.557c0 2.608-2.113 4.721-4.721 4.721h-16.557c-2.608 0-4.721-2.113-4.721-4.721v-16.557z"></path><path fill="rgb(255, 255, 255)" d="M18.864 7.039v0l1.618 1.472-9.403 10.459-5.462-5.462 2.056-2.068 3.828 3.828-1.028 0.027 7.865-8.736 0.527 0.48z"></path></svg>');
}

@mixin radio-unchecked($fill-color: $check-border-color, $size:"") {
  @include svg-background($size);
  background-image: svg-url('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="26" height="26" viewBox="0 0 26 26"> <path fill="#{$fill-color}" d="M1.857 13v0 0c0 6.142 4.989 11.143 11.143 11.143v0c6.142 0 11.143-4.989 11.143-11.143v0c0-6.142-4.989-11.143-11.143-11.143v0c-6.142 0-11.143 4.989-11.143 11.143v0zM0 13v0c0-7.176 5.829-13 13-13 7.176 0 13 5.829 13 13 0 7.176-5.829 13-13 13-7.176 0-13-5.829-13-13v0z"></path></svg>');
}

@mixin radio-checked($fill-color: $primary-color, $size:"") {
  @include svg-background($size);
  background-image: svg-url('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="26" height="26" viewBox="0 0 26 26"><path fill="#{$check-border-color}" d="M1.857 13v0 0c0 6.142 4.989 11.143 11.143 11.143v0c6.142 0 11.143-4.989 11.143-11.143v0c0-6.142-4.989-11.143-11.143-11.143v0c-6.142 0-11.143 4.989-11.143 11.143v0zM0 13v0c0-7.176 5.829-13 13-13 7.176 0 13 5.829 13 13 0 7.176-5.829 13-13 13-7.176 0-13-5.829-13-13v0z"></path><path fill="#{$fill-color}" d="M13 5.571c4.103 0 7.429 3.326 7.429 7.429s-3.326 7.429-7.429 7.429c-4.103 0-7.429-3.326-7.429-7.429s3.326-7.429 7.429-7.429z"></path></svg>');
}

@mixin alert-success($fill-color: $white, $size:"") {
  @include svg-background($size);
  background-image: svg-url('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="26" height="26" viewBox="0 0 26 26"><path fill="#{$fill-color}" d="M13 26c7.18 0 13-5.82 13-13s-5.82-13-13-13c-7.18 0-13 5.82-13 13s5.82 13 13 13zM19.161 6.801l1.502 1.367-10.158 11.298-5.578-5.579 1.675-1.684 0.23 0.23 3.592 3.585 8.496-9.437 0.242 0.22z"></path></svg>');
}

@mixin alert-info($fill-color: $white, $size:"") {
  @include svg-background($size);
  background-image: svg-url('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="26" height="26" viewBox="0 0 26 26"><path fill="#{$fill-color}" d="M13 26c-7.18 0-13-5.82-13-13s5.82-13 13-13c7.18 0 13 5.82 13 13s-5.82 13-13 13zM14.332 20.185v-9.788h-2.644v9.788h2.644zM14.352 8.806v-2.644h-2.644v2.644h2.644z"></path></svg>');
}

@mixin alert-error($fill-color: $white, $size:"") {
  @include svg-background($size);
  background-image: svg-url('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="26" height="26" viewBox="0 0 26 26"><path fill="#{$fill-color}" d="M13 26c-7.18 0-13-5.82-13-13s5.82-13 13-13c7.18 0 13 5.82 13 13s-5.82 13-13 13zM13 14.481l5.403 5.405 1.479-1.479-5.403-5.405 5.403-5.405-1.479-1.479-5.403 5.405-5.403-5.405-1.479 1.479 5.403 5.405-5.403 5.405 1.479 1.479 5.403-5.405z"></path></svg>');
}


// Module Dependencies
/* scss-combine:../../node_modules/bc-modal/dist/scss/modal */
.modal-overlay {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 980;
  background-color: rgba(#000, 0.3);
  display: none;
  opacity: 0;

  &.animating,
  &.visible {
    display: block;
    transition: opacity 0.3s ease;
  }

  &.visible {
    opacity: 1;
  }
}

.modal-wrapper {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1000;
  display: none;
  overflow: hidden;
  -webkit-overflow-scrolling: touch;
  outline: 0;
  opacity: 0;

  &.animating,
  &.visible {
    display: block;
    transition: opacity 0.2s ease;
  }

  &.animating-in {
    transition-delay: 0.1s;
  }

  &.visible {
    overflow-x: hidden;
    overflow-y: auto;
    opacity: 1;
  }
}

.modal {
  position: relative;
  margin-left: auto;
  margin-right: auto;
}


// Core
/* scss-combine:core/unavailable */
.unavailable-container {
  display: table;
  text-align: center;
  width: 100%;
  height: 100vh;
  font-size: 14px;

  @media (min-width: 400px) {
    font-size: 16px;
  }
}

.unavailable-container-inner {
  display: table-cell;
  padding: 20px;
  vertical-align: middle;
}

.unavailable-logo {
  margin-top: 0;
}

.unavailable-heading {
  font-size: 1.5em; // 24px desktop
}

.unavailable-message {
  max-width: 400px;
  margin: 0 auto;
  font-size: 0.875em; // 14px desktop
}


// General
/* scss-combine:general/fonts */

@font-face {
  font-family: "Social Icons";
  src: url("/assets/pixelunionsocialicons-regular.eot");
  src: url("/assets/pixelunionsocialicons-regular.eot?#iefix") format("embedded-opentype"),
       url("/assets/pixelunionsocialicons-regular.woff") format("woff");
  font-weight: normal;
  font-style: normal;
}

/* scss-combine:general/general */
/* General */

body {
  font-family: $body-font;
  font-size: $font-size;
  line-height: 1.666;
  color: $body-color;
  content: "mobile";

  @include breakpoint(m-up) {
    content: "desktop";
  }
}

/* Links */

a {
  color: $accent-color;
  transition: color 0.2s $ease-out-quad;

  &:hover {
    @include hover($accent-color);
  }
}

/* Headers */

h1, h2, h3, h4, h5, h6 {
  @extend %heading-text-treatment;
}

h1 { font-size: 36px; }
h2 { font-size: 28px; }
h3 { font-size: 20px; }
h4 { font-size: 18px; }
h5 { font-size: 14px; }
h6 { font-size: 14px; }

.page-heading {
  @extend %heading-text-treatment, %center, %full-width;
  font-size: 20px;
}

.section-title {
  @extend %section-title-text-treatment, %center;
  margin-top: 0;
  font-size: 20px;
}

/* Basic elements */

hr {
  background: $border-color;
}

cite {
  color: $accent-color;
}

img {
  height: auto;
  max-width: 100%;
}

.main-content {
  @extend %clearfix;
  border-top: 1px solid $border-color;
}

// ---------------------------------------------------------------- */
// Hiding and Showing Content
// Snippets borrowed from a11yproject:
// http://a11yproject.com/posts/how-to-hide-content/

%visually-hidden,
.visually-hidden {
  // scss-lint:disable ImportantRule
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
  border: 0 !important;
}

body:hover .visually-hidden a,
body:hover .visually-hidden input,
body:hover .visually-hidden button {
  // scss-lint:disable ImportantRule
  display: none !important;
}

.hidden {
  display: none;
  visibility: hidden;
}

.visible { display: block; }

// ---------------------------------------------------------------- */

/* Scroll Locking */

.scroll-locked {
  overflow-y: hidden;
}

.scroll-locked-medium {
  @include breakpoint(m) {
    overflow-y: hidden;
  }
}

.show-for-sr {
  @extend %visually-hidden;
}

.disabled {
  // scss-lint:disable ImportantRule
  cursor: not-allowed !important;
}

/* scss-combine:general/button */
.button {
  min-width: 140px;
  padding: 12px 30px;
  font-family: $button-font;
  font-size: 13px;
  font-weight: $button-weight;
  letter-spacing: 0.05em;
  color: $white;
  text-align: center;
  text-transform: uppercase;
  border: 1px solid;
  // Todo: add theme setting for border-radius on buttons and inputs
  border-radius: 3px;
  transition: all 0.2s $ease-out-quad;

  &.button-primary {
    @include button-bg();
    color: $white;
    background-color: $primary-button-background-color;
    border-color: darken($primary-button-background-color, 5%);

    &:hover {
      @include button-hover($primary-button-background-color, background-color);
      color: $primary-button-color;
    }
  }

  &.button-secondary {
    color: $secondary-button-color;
    background-color: $white;
    border-color: $secondary-button-color;

    &:hover {
      color: $secondary-button-color;
      background-color: mix($secondary-button-color, $white, 10%);
    }
  }

  &.button-tertiary {
    font-weight: normal;
    letter-spacing: 0;
    color: $primary-button-background-color;
    text-transform: none;
    background-color: $white;
    border-color: $white;

    &:hover {
      color: $secondary-button-color;
      background-color: $white;
    }
  }

  &.button-small {
    min-width: 100px;
    padding: 8px 10px;
    font-size: 11px;
    font-weight: normal;
  }

  &.button-disabled {
    color: $disabled-button-color;
    cursor: not-allowed;
    background: $disabled-button-background;
    border-color: $disabled-button-background;

    &:hover {
      background-color: darken($disabled-button-background, 10%);
    }
  }

  & + & {
    margin-left: 11px;
  }
}

/* scss-combine:general/form */
.option-unavailable {
  opacity: 0.5;

  .form-label-text { text-decoration: line-through; }
}

.form-input {
  display: block;
  width: 100%;
  padding: 10px 15px;
  color: $input-color;
  background: $input-background-color;
  border-color: $input-border-color;
  border-radius: 3px;

  &::placeholder {
    //scss-lint:disable VariableForProperty
    color: lighten($input-color, 20%);
  }

  &:focus {
    outline: none;
  }
}

// -------------------------- Form Errors -------------------------- //
// Default error classes, as dictated by validetta.js

.form-inline-message {
  display: block;

  .form-field-invalid & {
    color: $error-color;
  }
}

// ---------------------------------------------------------------- //
// Select Wrappers - Provides some additional style control for select elements

.form-select-wrapper {
  position: relative;
  display: block;
  min-height: 40px;
  padding: 8px ($gutter * 2) 8px $gutter;
  font-family: $primary-font;
  font-size: 14px;
  line-height: 1.6;
  color: $input-color;
  cursor: pointer;
  background-color: $white;
  border: 1px solid $select-border-color;
  border-radius: 3px;

  &:after {
    @include icon-arrow-down($body-color);
    position: absolute;
    top: 50%;
    right: $gutter;
    width: 7px;
    height: 7px;
    transform: translateY(-50%);
  }

  &.is-focused { border-color: $select-border-active; }

  .form & {
    font-family: $secondary-font;
  }

  select {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 2;
    width: 100%; // needed for Firefox
    height: 100%; // needed for IE
    cursor: pointer;
    opacity: 0;
    appearance: none;
  }
}

.form-selected-text-prefix {
  margin-right: 5px;
  font-weight: bold;
}

// ---------------------------------------------------------------- //
// Common Form Classes:

// Wraps each field component
.form-field {
  margin-bottom: $gutter * 1.5;
}

// Form label - applied to the label itself. Prefer to style off titles.
.form-label {}

// Applied to labels that are used as option titles
.form-field-title {
  @extend %section-title-text-treatment;
  display: block;
  margin-bottom: 5px;
}

.product-option-title {}
.form-option-title {}

// Applied to labels used as option text (radios/checkboxes)
.form-label-text { user-select: none; }
.product-option-text { user-select: none; }
.form-option-text { user-select: none; }

// inline inputs
.form-field-product-list,
.form-field-checkbox,
.form-field-radio {
  .form-field-control {
    display: inline-block;
  }

  .form-input {
    display: inline-block;
    width: auto;
  }

  .form-radio,
  .form-checkbox {
    @extend %visually-hidden;

    + .form-label-text:before {
      position: relative;
      top: 1px;
      width: 12px;
      height: 12px;
      margin-right: 12px;
      cursor: pointer;
    }
  }

  .form-radio {
    + .form-label-text:before {
      @include radio-unchecked();
    }

    &:checked + .form-label-text:before {
      @include radio-checked();
    }
  }

  .form-checkbox {
    + .form-label-text:before {
      @include checkbox-unchecked();
    }

    &:checked + .form-label-text:before {
      @include checkbox-checked();
    }
  }
}

// Required form element display 'required' text next title
.required-text {
  font-size: 0;
  color: $white;

  &:before {
    margin-left: -2px;
    font-size: $font-size;
    font-weight: bold;
    color: $highlight-color;
    content: "*";
  }
}


// ---------------------------------------------------------------- */
// Swatch: Set of options displaying color / pattern choices

.swatch-value {
  font-weight: normal;

  em {
    font-style: normal;
  }
}

.form-field-swatch {
  .form-field-control { @extend %clearfix; }

  .form-label-text { display: none; }

  .swatch-wrap {
    position: relative;
    display: block;
    float: left;
    margin: 0 ($gutter / 2) ($gutter / 2) 0;

    &:hover {
      .swatch-pattern-expanded {
        opacity: 1;
        transform: translate(-50%, 0);
        visibility: visible;
        z-index: 5000;
      }
    }
  }

  // The block that the swatch sits within.
  .swatch {
    position: relative;
    display: block;
    width: 40px;
    height: 40px;
    padding: 2px;
  }

  // Blocks displaying the pattern / colors
  .swatch-color {
    position: absolute;
    top: 3px;
    right: 3px;
    bottom: 3px;
    left: 3px;
    background: {
      position: 50%;
      repeat: no-repeat;
      size: cover;
    }

    &.secondary {
      left: 50%;
    }

    &.tertiary {
      top: 50%;
      left: 50%;
    }
  }

  .swatch-radio {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
    width: 100%;
    height: 100%;
    cursor: pointer;
    opacity: 0;

    // Unselected Swatch Items
    + .swatch {
      border: 1px solid $select-border-color;
      border-radius: 3px;
    }

    // Selected Swatch Item
    &:checked + .swatch {
      border-color: $primary-color;
    }
  }

  .swatch-pattern-expanded {
    position: absolute;
    top: calc(100% + 5px);
    left: calc(100% + 14px);
    min-height: 100px;
    min-width: 100px;
    padding: 3px;
    background-color: $body-background-color;
    border: 1px solid $border-color;
    border-radius: 3px;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);

    @media only screen and (max-device-width: 768px) { display: none; }
  }

  .swatch-pattern-image {
    display: block;
    width: 100px;
    height: 100px;
    background: {
      position: 50%;
      repeat: no-repeat;
      size: cover;
    }
  }
}

// ---------------------------------------------------------------- */
// Date Field Components

.form-field-date {
  @extend %clearfix;

  .form-date-year,
  .form-date-month,
  .form-date-day {
    float: left;
  }

  .form-date-year { width: 44%; }

  .form-date-month {
    width: 25%;
    margin-right: 3%;
    margin-left: 3%;
  }

  .form-date-day { width: 25%; }
}

.product-event-bounds {
  display: inline-block;
  margin-top: 5px;
}


// ---------------------------------------------------------------- */
// Rectangles - Form options displayed as a series of rectangles with text

.form-field-rectangle {
  @extend %clearfix;

  .rectangle {
    position: relative;
    display: inline-block;
    float: left;
    margin: 0 ($gutter / 2) ($gutter / 2) 0;
  }

  .rectangle-text {
    display: block;
    min-width: 40px;
    padding: 12px;
    line-height: 1;
    text-align: center;
    border: 1px solid $select-border-color;
    border-radius: 3px;
  }

  .form-input {
    position: absolute;
    z-index: 1;
    width: 100%;
    height: 100%;
    cursor: pointer;
    opacity: 0;

    // Selected Item
    &:checked + .rectangle-text {
      color: $primary-color;
      border-color: $primary-color;
    }
  }
}


// ---------------------------------------------------------------- */
// File

.form-file-wrapper {
  display: block;
  padding: 5px;
  border: 1px solid $border-color;
  border-radius: 3px;
}

.form-file-types,
.form-file-size {
  display: inline-block;
  margin-top: 10px;
  margin-right: 5px;
}


// ---------------------------------------------------------------- */
// Pick-Product

.product-picklist-radio {
  @extend %visually-hidden;

  + .product-picklist-item-body:before {
    @include radio-unchecked();
    position: absolute;
    top: 50%;
    left: 15px;
    width: 12px;
    height: 12px;
    margin-right: 12px;
    cursor: pointer;
    transform: translateY(-50%);
  }

  &:checked + .product-picklist-item-body:before {
    @include radio-checked();
  }
}

.product-picklist-item {
  min-width: 350px;
  border-right: 1px solid $border-color;
  border-bottom: 1px solid $border-color;
  border-left: 1px solid $border-color;

  @include breakpoint(s) { min-width: 0; }

  &:first-of-type {
    border-top: 1px solid $border-color;
    border-radius: 3px 3px 0 0;
  }

  &:last-of-type { border-radius: 0 0 3px 3px; }
}

.product-picklist-item-body {
  position: relative;
  z-index: 1;
  display: table;
  width: 100%;
  min-height: $gutter * 3;
  padding: 10px 20px 10px 5px;
  cursor: pointer;
}

.product-picklist-image-wrap {
  position: absolute;
  top: 50%;
  left: 40px;
  display: block;
  width: 100%;
  height: 100%;
  max-width: 40px;
  transform: translateY(-50%);
}

.product-picklist-image {
  position: absolute;
  top: 50%;
  left: 0;
  max-height: 100%;
  padding: 3px;
  transform: translateY(-50%);
}

.product-picklist-label-text {
  display: table-cell;
  padding-left: 90px;
  line-height: 1.4;
  color: inherit;
  vertical-align: middle;

  .picklist-none & { padding-left: 35px; }
}

// ---------------------------------------------------------------- */
// Quantity Increment Components

.form-submit-container {
  margin-bottom: 0;
  font-size: 0;

  .form-field-quantity-control,
  .button {
    height: 46px;
    padding-top: 0;
    padding-bottom: 0;
    margin-bottom: $gutter * 1.5;
    line-height: 46px;
  }

  &.add-to-cart-blurred {
    .form-field-quantity-control,
    .button {
      opacity: 0.5;
    }
  }
}

.form-field-quantity-label .form-field-title {
  display: inline-block;
  float: left;
  margin-right: $gutter;
  margin-bottom: $gutter * 1.5;
  font-size: 13px;
  line-height: 40px;

  &:after {
    content: ":";
  }
}

.form-field-quantity-control {
  @extend %clearfix;
  position: relative;
  display: inline-block;
  float: left;
  height: 40px;
  max-width: 150px;
  margin-right: $gutter;
  margin-bottom: $gutter * 1.5;
  line-height: 40px;

  .form-input {
    height: 100%;
    padding-right: $gutter * 2;
    padding-left: $gutter * 2;
    font-size: 13px;
    text-align: center;
    background-color: lighten($input-background-color, 3%);
    border-color: lighten($input-background-color, 3%);

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
    }
  }
}

.quantity-control {
  position: absolute;
  top: 0;
  display: block;
  width: $gutter * 2;
  height: 100%;
  font-size: 14px;
  // line-height: 40px;
  text-align: center;
  cursor: pointer;
  user-select: none;

  &:hover {
    color: $primary-color;
  }

  &.quantity-increment { right: 0; }
  &.quantity-decrement { left: 0; }
  &.quantity-control-blurred { cursor: default; }
}

/* scss-combine:general/table */
/* Tables */

table {
  color: $body-color;
  border-color: $border-color;
}

th {
  @extend %heading-text-treatment;
  color: $input-color;
  background: $input-background-color;
}

/* scss-combine:general/reviews */
// Submission Modal
.review-modal-container {
  display: none;
}

// Rating Stars (clickable)
.input-stars {
  position: relative;
  display: inline-block;

  &.form-field-error {
    padding-bottom: 20px;
  }

  .star {
    float: right;
    width: 20px;
    height: 20px;
    color: $star-color;
    cursor: pointer;

    .star-full { display: none;}

    &:hover,
    &:hover ~ .star {
      // scss-lint:disable NestingDepth
      .star-full { display: block; }
      .star-empty { display: none; }
    }
  }

  > input:checked ~ label {
    .star-full {
      display: block;
    }
    .star-empty {
      display: none;
    }
  }

  .form-inline-message {
    position: absolute;
    bottom: 0;
    left: 0;
    white-space: nowrap;

    + .form-inline-message { display: none; }
  }
}

// Rating Stars (readonly)
.rating-stars {
  display: inline-block;

  .star {
    width: 20px;
    height: 20px;
    color: $star-color;
  }

  .star-empty {
    fill: rgba($body-color, 0.3);
  }

  .star-full {
    fill: $accent-color;
  }
}

// Review Modal
.modal-leave-review .modal-content {
  @extend %clearfix;
}

.review-image-column {
  @include breakpoint(s) { display: none; }

  @include with-layout($product) { @include span(last 7 of 16); }
}

.review-form-column {
  @include breakpoint(m-up) {
    @include with-layout($product) { @include span(first 9 of 16); }
  }
}

.review-image-caption {
  @extend %section-title-text-treatment;
  font-size: 14px;
  text-align: center;
}

/* scss-combine:general/modals */
.modal-overlay {
  background-color: rgba($black, 0.5);
}

.modal {
  max-width: 840px;
  max-height: 90%;
  padding: $gutter * 2;
  overflow-y: scroll;
  background-color: $body-background-color;
  box-shadow: 0 1px 4px 0 $shadow-color;
}

.modal-heading {
  padding-bottom: $gutter;
  margin-top: 0;
  margin-bottom: $gutter * 1.5;
  font-size: 20px;
  border-bottom: 1px solid $border-color;
}

.modal-content {
  position: relative;

  .modal-close {
    position: absolute;
    top: 0;
    right: 0;
    font-size: $font-size;
    line-height: 1;
    color: $black;

    svg {
      width: 16px;
      height: 16px;
    }
  }
}

/* scss-combine:general/layout */
body {
  background-color: $page-background-color;

  @if ($site-background-image) {
    background-attachment: fixed;
    background-image: url("#{$site-background-image}");
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
  }

  @include breakpoint(m-up) {
    padding: $gutter * 2;
  }

  @include breakpoint(m-only) {
    &:before {
      position: fixed;
      top: 0;
      left: 0;
      z-index: index($elements, mobile-nav-mask);
      display: block;
      width: $gutter * 2;
      height: 100%;
      background-color: $page-background-color;
      content: "";
    }
  }
}

.page-wrap {
  width: 100%;
  max-width: $max-width;
  margin-right: auto;
  margin-left: auto;
  background-color: $body-background-color;
}

.content {
  @extend %clearfix;
  padding: ($gutter * 2) ($gutter * 2) ($gutter * 3);
  @include breakpoint(m) { padding: $gutter;}
}

.page-container {
  @include container(710px);
  margin-bottom: 70px;
}

/* scss-combine:general/navigation */
.primary-navigation {
  position: relative;
  z-index: index($elements, primary-navigation);
  height: $primary-navigation-height;
  font-family: $main-navigation-font;
  font-weight: bold;
}

.main-menu {
  @extend %heading-text-treatment;
  font-family: $main-navigation-font;
}

@include breakpoint(m) {
  /* scss-combine:navigation-small */
.primary-navigation {
  @include antialias($white);
  height: $mobile-navbar-height;
  background: $banner-background-color;

  a {
    color: $white;

    &:hover,
    &:active {
      color: mix($white, $banner-background-color, 50%);
    }
  }

  &-fixed {
    position: fixed;
    top: 0;
    width: 100%;
  }
}

.main-menu {
  position: fixed;
  top: $mobile-navbar-height;
  bottom: 0;
  display: none;
  width: 100%;
  max-width: 324px;
  background-color: $white;
  box-shadow: 0 0 0 2000px rgba($white,0);

  &.animating,
  &.visible {
    display: block;
  }

  &.animating {
    transform: translateX(-100%);
    transition: all 0.2s $ease-out-quad;

    @include breakpoint(m-only) {
      transform: translateX(calc(-100% - #{$gutter * 2}));
    }
  }

  &.visible {
    display: block;
    transform: translateX(0);
    box-shadow: 0 0 0 2000px $shadow-color;
  }

  >  ul > li {
    border-bottom: 1px solid $border-color;
  }

  a {
    display: block;
    padding: $gutter $gutter + 5;
    color: $accent-color;
  }

  .nav-tools {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
  }

  .currency-select-wrapper,
  .customer-links > a {
    display: block;
    height: $mobile-nav-tools-height;
    padding: 0;
    line-height: $mobile-nav-tools-height;
    color: $lighter-text;
    text-align: center;
    background-color: $border-color;

    @include with-layout($mobile-links) { @include span(1 of 3); }
  }

  .currency-select-wrapper {
    @include with-layout($mobile-links) { @include span(first 1); }
  }
}

.menu-dropdown {
  position: relative;

  > a {
    position: relative;
    transition: all 0.2s $ease-out-quad;
  }

  &:not(.active) > a {
    padding-right: 54px;

    &:after {
      @include icon-chevron-right($accent-color, 12px);
      position: absolute;
      top: 0;
      right: 0;
      width: 54px;
      height: 100%;
    }
  }

  &.active > a {
    padding-left: 39px;
    color: mix($navigation-color, $banner-background-color, 50%);
    background-color: lighten($border-color, 3%);

    &:before {
      @include icon-chevron-left($accent-color, 12px);
      position: absolute;
      top: 0;
      left: 0;
      width: 54px;
      height: 100%;
    }
  }
}

.menu-dropdown > .dropdown {
  position: absolute;
  top: 100%;
  left: 100%;
  z-index: index($elements, dropdown);
  width: 100%;
  margin-top: 1px;
  background-color: $white;
  transition: all 0.2s $ease-out-quad;

  &.visible {
    transform: translateX(-100%);
  }
}

.nav-menu {
  position: absolute;
  top: 0;
  right: 0;
  bottom: $mobile-nav-tools-height + 2;
  left: 0;
  width: 100%;
  overflow-x: hidden;
  overflow-y: auto;
}

// Drill in styles
.nav-menu-item {
  max-height: 150px;
  opacity: 1;
  transition: max-height 0.2s $ease-out-quad 0.2s,
              opacity 0.2s $ease-out-quad 0.4s;

  &.hide-anchor > a{
    display: none;
  }

  .dropdown-displayed & {
    max-height: 0;
    opacity: 0;
    transition: opacity 0.2s $ease-out-quad,
                max-height 0.2s $ease-out-quad 0.2s;

    &.active {
      max-height: 150px;
      opacity: 1;
    }
  }

  a {
    letter-spacing: 0.075em;
    text-transform: $navigation-text-transform;
  }
}

.nav-submenu-item {
  opacity: 1;
  transition: max-height 0.2s $ease-out-quad 0.2s,
  opacity 0.2s $ease-out-quad 0.4s;

  &.hide {
    display: none;
  }

  &.hide-anchor > a {
    display: none;
  }

  > .nav-submenu {
    display: none;

    &.animating,
    &.visible {
      display: block;
    }

    // initial state for enter transition
    &.animating-in {
      transform: translateX(200%);
      transition: transform 0.3s ease;
    }

    // initial state for leave transition
    &.animating-out {
      opacity: 0;
      transition: opacity 0.2s ease;
    }

    // final states for both in and out
    &.visible {
      transform: translateX(0);
      opacity: 1;
    }
  }

  .nav-submenu-item:first-of-type {
    border-top: 1px solid $border-color;
  }

  > a {
    position: relative;
    border-bottom: 1px solid $border-color;
  }

  > .submenu-trigger:not(.active) {
    padding-right: 54px;

    &:after {
      @include icon-chevron-right($accent-color, 12px);
      position: absolute;
      top: 0;
      right: 0;
      width: 54px;
      height: 100%;
    }
  }

  > .submenu-trigger.active {
    padding-left: 39px;
    color: mix($navigation-color, $banner-background-color, 50%);
    background-color: lighten($border-color, 3%);

    &:before {
      @include icon-chevron-left($accent-color, 12px);
      position: absolute;
      top: 0;
      left: 0;
      width: 54px;
      height: 100%;
    }
  }
}

.nav-submenu-item-all,
.meganav-submenu-header {
  display: none;
}
}

@include breakpoint(l-up) {
  /* scss-combine:navigation-large */
.primary-navigation {
  @include antialias($navigation-color);
  max-width: 100%;

  a {
    color: $navigation-color;

    &:hover,
    &:active {
      color: $navigation-hover;
    }
  }
}

.main-menu {
  position: absolute;
  top: 50%;
  left: 50%;
  text-align: center;
  transform: translate(-50%, -50%);

  .currency-select-wrapper,
  .customer-links {
    display: none;
  }
}

// Styles for the Primary Navigation links
.nav-menu-item {
  position: relative;
  display: inline-block;
  margin-right: 5px;

  &:last-of-type {
    margin-right: 0;
  }

  > a {
    display: block;
    padding: 10px;
    letter-spacing: 0.075em;
    text-transform: $navigation-text-transform;
    color: #f37e8b;
  }

  &.menu-dropdown {
    > a:after {
      @include icon-arrow-down($navigation-color);
      width: 6px;
      height: 6px;
      margin-left: 5px;
    }

    &.active > a { color: $accent-color; }
    &.active > a:after { @include icon-arrow-down($accent-color); }
  }
}

// Styles for the Dropdown Menus
.menu-dropdown:not(.nav-submenu-item) {
  text-align: left;

  &.active > a {
    position: relative;
    z-index: index($elements, active-dropdown);

    &:before {
      position: absolute;
      top: -2px;
      right: -10px;
      bottom: -7px;
      left: -10px;
      z-index: -1;
      display: block;
      background-color: $body-background-color;
      content: "";
      box-shadow: 0 -3px 3px -3px $shadow-color,
                  3px 0 3px -3px $shadow-color,
                  -3px 0 3px -3px $shadow-color;
    }
  }

  > .dropdown {
    position: absolute;
    top: calc(100% + 4px);
    left: -10px;
    z-index: index($elements, dropdown);
    display: none;
    min-width: 220px;
    max-height: 700px;
    padding: 20px 20px 15px;
    overflow-y: auto;
    background-color: $body-background-color;
    box-shadow: 0 1px 4px 0 $shadow-color;

    &.animating,
    &.visible {
      display: block;
    }
  }
}

// Styles for nested navigations
.nav-submenu-item {
  margin-bottom: 13px;
  font-size: $font-size;
  font-weight: 400;
  line-height: 1.1;
  text-transform: none;

  &:last-of-type {
    margin-bottom: 0;
  }

  a {
    color: $accent-color;
  }
}

.nav-menu-item > .nav-submenu > .nav-submenu-item {
  font-weight: 700;
}

.nav-submenu {
  margin-top: 10px;
  margin-bottom: 10px;
  margin-left: 10px;
}

.nav-menu-item > .nav-submenu {
  margin-top: 0;
  margin-bottom: 0;
  margin-left: 0;
}

.nav-submenu-item > .nav-submenu {
  display: none;

  &.animating,
  &.visible {
    display: block;
  }

  // initial state for enter transition
  &.animating-in {
    transform: translateX(-5%);
    transition: transform 0.2s ease;
  }

  // initial state for leave transition
  &.animating-out {
    opacity: 0;
    transition: opacity 0.2s ease;
  }

  // final states for both in and out
  &.visible {
    transform: translateY(0);
    opacity: 1;
  }
}

.submenu-trigger.active {
  font-weight: 700;
}

.js .nav-menu {
  visibility: hidden;

  &.show-menu {
    visibility: visible;
  }
}

  /* scss-combine:mega-navigation */
@media (min-width: 992px) {
  .show_categories_meganav {

    .meganav-submenu-header {
      display: none;
    }

    .menu-meganav {
      > .nav-submenu.meganav-submenu {
        min-height: 330px;
        white-space: nowrap;

        &.active,
        &.visible {
          display: flex;
        }

        > .meganav-submenu-item {
          flex-shrink: 0;
          display: inline-block;
          width: 200px;
          padding-right: 30px;
          white-space: normal;

          > .nav-submenu {
            display: block;
            margin-left: 0;
          }

          .meganav-submenu.nav-submenu {
            // initial state for enter transition
            &.animating-in {
              opacity: 0;
              transform: translateY(-5%);
              transition: all 0.2s ease;
            }

            // initial state for leave transition
            &.animating-out {
              opacity: 0;
              transform: translateY(-5%);
              transition: all 0.2s ease;
            }

            // final states for both in and out
            &.visible {
              transform: translateY(0);
              opacity: 1;
            }
          }
        }
      }
    }
  }

  .show_categories_meganav_large {

    .menu-meganav {
      > .nav-submenu.meganav-submenu {
        width: calc(100vw - 60px);
        max-width: 1300px;
        min-height: 330px;
        padding-top: 50px;
        box-sizing: border-box;

        .meganav-divider {
          position: absolute;
          left: 250px;
          top: 50px;
          bottom: 50px;
          width: 1px;
          height: calc(100% - 100px);
          background-color: $border-color;
        }

        .current > .meganav-submenu-item {
          padding-right: 120px;
        }

        > .meganav-submenu-item {
          max-width: 250px;
          margin-bottom: 0;
          padding-bottom: 14px;

          &:last-of-type {
            margin-bottom: 40px;
          }

          > a {
            letter-spacing: 1px;
            line-height: 1.08;
            text-transform: uppercase;
          }

          > .nav-submenu {
            position: absolute;
            top: 50px;
            bottom: 0;
            left: 300px;
            margin-top: auto;
            margin-bottom: auto;

            &.animating,
            &.visible {
              display: flex;
              flex-direction: column;
              flex-wrap: wrap;
            }

            // initial state for enter transition
            &.animating-in {
              opacity: 0;
              transform: translateX(10%);
              transition: transform 0.2s ease, opacity 0.2s ease;
            }

            // initial state for leave transition
            &.animating-out {
              opacity: 0;
              transform: translateX(10%);
              transition: transform 0.2s ease, opacity 0.2s ease;
            }

            &.visible {
              transform: translateX(0);
              opacity: 1;
            }

            > .meganav-submenu-header .meganav-back {
              display: none;
            }

            .nav-submenu-item {

              &.hide {
                display: none;
              }

              > .submenu-trigger.active {
                display: none;
              }

              > .nav-submenu {
                margin: 0;

                &.animating,
                &.visible {
                  display: flex;
                  flex-direction: column;
                  flex-wrap: wrap;
                }

                // initial state for enter transition
                &.animating-in {
                  opacity: 0;
                  transform: translateX(10%);
                  transition: transform 0.2s ease, opacity 0.2s ease;
                }

                // initial state for leave transition
                &.animating-out {
                  opacity: 0;
                  transform: translateX(10%);
                  transition: transform 0.2s ease, opacity 0.2s ease;
                }

                &.visible {
                  transform: translateX(0);
                  opacity: 1;
                }
              }
            }

            .nav-submenu.current {
              padding-top: 40px;
            }
          }
        }

        > .meganav-submenu-item {
          > a {
            color: $accent-color;
          }

          &.blurred > a {
            color: $navigation-hover;
          }
        }
      }

      .nav-submenu-item-all {
        display: none;
      }
    }

    .meganav-submenu-header {
      position: absolute;
      top: -50px;

      &.hide {
        display: none;
      }

      .meganav-back {
        padding-bottom: 12px;
        font-size: 12px;
        letter-spacing: 0.1px;
        line-height: 1.17;
        color: $accent-color;
        cursor: pointer;

        &::before {
          width: 12px;
          height: 8px;
          margin-right: 5px;
          @include icon-chevron-left($accent-color, 12px);
        }
      }

      .meganav-submenu-name {
        font-size: 18px;
        font-weight: 700;
        line-height: 0.78;
        color: $accent-color;
      }
    }
  }
}
}

/* scss-combine:general/header */
.main-header {
  position: relative;
  z-index: index($elements, main-header);
  height: 220px;
  font-size: 13px;

  @include breakpoint(m) {
    color: $white;
  }

  @include breakpoint(m-up) {
    height: 328px;
  }

  @include breakpoint(l-up) {
    height: 380px;
    color: $navigation-color;
  }

  background-color: $header-color;

  &:first-child {
    @include breakpoint(l-up) {
      border-top: 4px solid $banner-background-color;
    }
  }
}

.navigation-toggle {
  @extend %button-reset;
  position: absolute;
  top: 50%;
  left: $gutter;
  transform: translateY(-50%);

  @include breakpoint(l-up) {
    display: none;
  }

  .icon-menu {
    position: relative;
    top: 4px;
    width: 20px;
    height: 20px;
  }
}

.search-form {
  position: absolute;
  top: 50%;
  left: $gutter * 2;
  transform: translateY(-50%);

  @include breakpoint(m) {
    left: $gutter * 2 + 24px;
  }

  .icon-search {
    position: relative;
    top: 4px;
    width: 16px;
    height: 16px;
  }

  .search-input {
    margin-left: 5px;
    color: $navigation-color;
    background-color: transparent;
    border: 0;
    appearance: none;

    &::placeholder {
      color: rgba($navigation-color, 0.5);

      @include breakpoint(m) {
        color: transparent;
      }
    }

    &:focus {
      outline: none;
    }

    @include breakpoint(m) {
      color: $white;

      &:focus::placeholder {
        color: rgba($white, 0.5);
      }
    }
  }

  .search-label {
    padding-top: 10px;
    padding-bottom: 10px;
    cursor: text;
  }
}

.header-tools {
  position: absolute;
  top: 50%;
  right: $gutter;
  transform: translateY(-50%);

  @include breakpoint(l-up) {
    right: $gutter * 2;
  }

  .currency-select-wrapper,
  .customer-links {
    display: inline-block;
    margin-right: $gutter;

    @include breakpoint(m) {
      display: none;
    }
  }

  .currency-select-wrapper,
  .customer-links > a {
    padding-top: 10px;
    padding-bottom: 10px;
  }

  .cart-preview-trigger {
    display: inline-block;
  }
}

.cart-preview-trigger {

  .icon-cart {
    position: relative;
    top: 4px;
    width: 18px;
    height: 18px;
  }

  .cart-preview-label {
    display: none;

    @include breakpoint(m) {
      display: inline;
    }
  }

  .cart-preview-quantity {
    @include breakpoint(m) {
      &:before {
        content: "(";
      }

      &:after {
        content: ")";
      }
    }
  }
}

.currency-select-wrapper {
  position: relative;
  cursor: pointer;
  transition: color 0.2s $ease-out-quad;

  select {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 2;
    width: 100%; // needed for Firefox
    height: 100%; // needed for IE
    cursor: pointer;
    opacity: 0;
    appearance: none;
  }

  .icon-arrow-down {
    position: relative;
    top: -1px;
    width: 6px;
    height: 6px;
    margin-left: 2px;
  }

  &:hover,
  &:active {
    color: $navigation-hover;
  }
}

.customer-links {
  cursor: default;

  .customer-link-logout {
    color: lighten($navigation-color, 50%);

    @include breakpoint(l-up) {
      &:before { content: "("; }
      &:after { content: ")"; }
    }
  }
}

.branding {
  position: absolute;
  top: calc(50% + #{$primary-navigation-height / 4});
  left: 50%;
  z-index: index($elements, branding);
  transform: translate(-50%, -50%);

  @include media($max: 315px) {
    width: 100%;
    padding-right: 10px;
    padding-left: 10px;
  }

  .logo { display: block; text-align: center; }

  .header-logo-image {
    max-width: 300px;
    max-height: 120px;

    @include breakpoint(m-up) {
      max-width: 100%;
      max-height: 200px;
    }

    @include media($max: 315px) {
      max-width: 100%;
    }
  }

  .text {
    margin-right: $gutter / 2;
    margin-left: $gutter / 2;
    text-align: center;
    margin-top: 0;

    a {
      color: $navigation-color;

      // scss-lint:disable NestingDepth
      &:hover,
      &:active {
        color: $navigation-hover;
      }
    }

    @include breakpoint(s) {
      font-size: 1.25em;
    }

    @include breakpoint(m-up) {
      margin-right: $gutter * 2;
      margin-left: $gutter * 2;
    }
  }
}

/* scss-combine:general/footer */
// Footer Layout
.main-footer {
  @extend %clearfix;
  padding: 40px 30px;
  color: $footer-color;
  background-color: $footer-background-color;
  background-clip: padding-box;

  @if lightness($footer-background-color) < 80% {
    @extend %antialiased;
  } @else {
    border-top: 1px solid $border-color;
  }

  @include breakpoint(m) {
    display: flex;
    flex-direction: column;

    .footer-navigation {
      margin-right: 0;
      margin-left: 0;
    }

    .footer-site-subscribe {
      order: 1;
    }

    .footer-bottom-row {
      order: 2;
    }
  }

  @include breakpoint(l-up) {
    padding: 47px 40px 33px;
  }

  a {
    color: inherit;

    &:hover {
      @if lightness($footer-background-color) < 80% {
        color: mix($white, $footer-background-color, 50%);
      } @else {
        color: mix($accent-color, $footer-background-color, 50%);
      }
    }
  }
}

// Footer Modules

.site-footer-item {
  @include breakpoint(m) {
    margin-bottom: $gutter * 2;
  }
}

// Branding
.footer-branding {
  @include breakpoint(m) {
    text-align: center;
  }

  @include breakpoint(l-up) {
    @include span(2 of 12);
    max-width: 100%;

    .social-icons-first & {
      @include span(last 2 of 12);
    }
  }

  .logo { display: block; }

  .footer-logo-image {
    // max-width: 100px;
  }

  .text {
    font-size: 9px;
    color: inherit;
    margin-top: 0;
    text-align: center;
  }
}

// Navigation
.footer-navigation {
  @include container;
  font-family: $footer-navigation-font;
  font-weight: bold;

  @include breakpoint(l-up) {
    @include span(5 of 12);
    @include pre(0.5 of 12);
    @include post(0.5 of 12);
  }
}

.footer-menu {
  font-size: 0;
  text-transform: uppercase;

  @include breakpoint(s) {
    @include span(12 of 12);
    margin-bottom: $gutter * 2;
  }

  @include breakpoint(m-up) {
    margin-top: -5px;

    // Sets 3 Columns if there are 3 Menus, 2 Columns if there are 2 Menus
    &:nth-last-child(3):first-child,
    &:nth-last-child(3):first-child ~ & {
      @include span(4 of 12);

      &:last-of-type { @include last; }
    }

    &:nth-last-child(2):first-child,
    &:nth-last-child(2):first-child ~ & {
      @include span(6 of 12);

      &:last-of-type { @include last; }
    }
  }
}

.footer-menu-header,
.footer-menu-item,
.footer-menu-catchall {
  margin-bottom: 5px;
  font-size: $font-size;
  letter-spacing: 0.05em;

  @include breakpoint(m) { text-align: center; }
}

.footer-menu-header {
  margin-top: 0;
  margin-bottom: 10px;
  font-size: $font-size - 1;
  opacity: $footer-alt-opacity;
  text-transform: uppercase;
}

.footer-social-header {
  margin-top: -4px;
  font-size: $font-size - 1;
}

.footer-menu-catchall {
  margin-top: 5px;
  font-size: $font-size - 2;

  &:after { content: "\203A";}
}

.footer-menu-tier-secondary {
  display: none;
}

// Subscribe
.footer-site-subscribe {
  @include breakpoint(l) {
    .social-nav {
      margin-bottom: $gutter * 2;
    }
  }

  @include breakpoint(l-up) {
    @include span(last 4 of 12);

    .social-icons-first & {
      @include span(first 4 of 12);
      margin-right: 0;
    }
  }

  @include breakpoint(s) {
    .social-icons-first & {
      order: 0;
    }
  }
}

.subscription-form {
  @include breakpoint(m) {
    text-align: center;
  }

  .form-input,
  .button {
    width: 100%;
    vertical-align: bottom;

    @include breakpoint(m) {
      height: 41px;
      max-width: 215px;
      margin-right: 5px;
    }

    @include breakpoint(s) {
      margin-bottom: $gutter / 2;
    }
  }

  .button {
    min-width: 0;
    padding-right: $gutter;
    padding-left: $gutter;

    @include breakpoint(l-up) {
      margin-top: $gutter;
    }
  }
}

// Social navigation


.social-nav-list {
  font-size: 0;

  @include breakpoint(m) {
    text-align: center;
  }

  @include breakpoint(l-up) {
    margin-top: 20px;
    margin-bottom: 20px;
  }
}

.social-link {
  display: inline-block;
  margin-right: $gutter;
  font-size: $font-size;

  &:last-of-type {
    margin-right: 0;
  }

  > a {
    display: block;
    width: 20px;
    height: 20px;
  }

  svg {
    width: 100%;
    height: 100%;
  }
}

// Footer bottom row

.footer-bottom-row {
  @include breakpoint(l-up) {
    @include span(12 of 12);
    position: relative;
    margin-top: 80px;
  }
}

.footer-accounts,
.footer-trademark {
  @include breakpoint(l-up) {
    @include span(6 of 12);
  }
}

// Accounts
.footer-accounts {
  @include breakpoint(m) {
    margin-top: $gutter;
    text-align: center;
  }

  @include breakpoint(l-up) {
    position: absolute;
    bottom: 0;
    left: 0;
    z-index: 1;
  }
}

.footer-accounts-list {
  font-size: 0;
  opacity: $footer-alt-opacity;

  > li {
    display: inline-block;
    margin-right: $gutter;
    font-size: $font-size;

    &:last-of-type {
      margin-right: 0;
    }
  }
}

// Trademark
.footer-trademark {
  opacity: $footer-alt-opacity;

  @include breakpoint(m) {
    margin-top: $gutter * 2;
    text-align: center;
  }

  @include breakpoint(l-up) {
    @include last;
    margin-top: $gutter;
    text-align: right;
  }
}

// Payment Icons
.footer-payment-icons {
  float: none;
  text-align: center;
  
  @include breakpoint(l-up) {
    @include span(12 of 12);
    @include break;
    
    margin-bottom: -43px;
  }
}

.footer-payment-icons-list {
  font-size: 0;
  opacity: $footer-alt-opacity;

  @include breakpoint(m) {
    text-align: center;
  }

  @include breakpoint(l-up) {
    text-align: center;
  }

  > li {
    display: inline-block;
    margin-right: $gutter;
    opacity: 0.7;

    &:last-of-type { margin-right: 0; }

    > svg {
      width: 40px;
      height: 40px;
    }
  }
}

.footer-copyright {
  display: block;
}
/* scss-combine:general/tabs */
.tab-content-panel {
  display: none;

  &.active {
    display: block;
  }
}

.product-tabs-menu {
  margin-top: 40px;
  margin-bottom: 25px;
  display: none;
}
.product-tabs.tabs-content { display: none; }
.product-tabs-list {
  font-size: 0;
}

.product-tab-title {
  display: inline-block;
  margin-right: $gutter * 2;
  font-family: $primary-font;
  font-size: 14px;
  font-weight: bold;

  &:last-of-type {
    margin-right: 0;
  }
}

.product-tab-link {
  color: $lightest-text;

  .active & {
    color: $primary-color;
  }
}

/* scss-combine:general/blog-index */
.blog-index {
  @include container();
}

.blog-item {
  margin-bottom: 50px;

  @include breakpoint(l-up) { @include gallery(6 of 12); }
}

.blog-item-link { display: block; }

.blog-item-featured-image {
  // position: relative;
  // z-index: index($elements, blog-image);
  // overflow: hidden;
  // background-color: $placeholder-image-background;
  // background-position: center;
  // background-size: cover;
  
  position: relative;
  z-index: index($elements, blog-image);
  overflow: hidden;

  &:before {
    display: block;
    width: 100%;
    // padding-top: 55%;
    content: "";
  }
  
  img {
    max-height: 330px;
    object-fit: cover;
    width: 100%;
  }
}

.blog-item-header {
  margin-top: 20px;
  margin-bottom: 10px;
}

.blog-item-timestamp {
  font-family: $primary-font;
  color: $lightest-text;
}

.blog-item-title {
  @extend %heading-text-treatment;
  margin-top: 6px;
  margin-bottom: 0;
  font-size: 18px;
}

.blog-item-footer {
  margin-top: 25px;

  .read-more {
    @extend %section-title-text-treatment;
    font-size: 12px;
    color: $accent-color;
    text-transform: uppercase;
  }
}

// Latest blog posts - home Page
.latest-blog-posts {
  border-top: 1px solid $border-color;

  .section-title {
    margin-bottom: 40px;
  }
}

/* scss-combine:general/blog-post */
// Thumbnail
.blog-post-header {
  position: relative;
}

.blog-post-featured-image {
  position: relative;
  z-index: index($elements, blog-image);
  overflow: hidden;
  background-color: $placeholder-image-background;
  background-position: center;
  background-size: cover;

  &:before {
    display: block;
    width: 100%;
    padding-top: 55%;
    content: "";
  }
}

// Layout
.blog-post-meta,
.blog-post-container {
  padding: ($gutter * 3) ($gutter * 2) ($gutter * 2);

  @include breakpoint(s) {
    padding-right: $gutter;
    padding-left: $gutter;
  }

  @include breakpoint(l-up) {
    padding-right: $gutter * 4;
    padding-left: $gutter * 4;
  }
}

.blog-post-meta {
  @include breakpoint(m) { text-align: center; }

  @include breakpoint(l-up) {
    position: absolute;
    bottom: $gutter * 3;
    left: $gutter * 4;
    z-index: index($elements, blog-title);
    padding: 0;
  }
}

.blog-post-container {
  @include container();
}

.blog-post-content {
  @include breakpoint(m) { margin-bottom: $gutter * 3; }
  @include breakpoint(l-up) { @include span(first 8 of 12); }
}

.blog-post-sidebar {
  @include breakpoint(l-up) {
    @include span(last 3.5 of 12);
    @include pull(0.5);
  }

  .blog-post-sidebar-author,
  .blog-post-tags,
  .share-buttons-nav { margin-bottom: $gutter * 2; }
}

// Text styles
.blog-post-header-author {
  display: none;

  @include breakpoint(m) {
    display: block;
    color: $lightest-text;
  }
}

.blog-post-title,
.blog-post-timestamp {
  @include breakpoint(l-up) {
    color: $white;
    text-shadow: 0 2px 4px rgba($black, 0.50);
  }
}

.blog-post-timestamp {
  font-family: $primary-font;

  @include breakpoint(m) { color: $lightest-text; }
}

.blog-post-title {
  @extend %heading-text-treatment;
  margin-top: 5px;
  margin-bottom: 0;
  font-size: 32px;
}

.blog-post-sidebar .share-heading,
.blog-post-sidebar-heading {
  display: block;
  margin-bottom: 6px;
  font-size: $font-size;
  color: $body-color;
}

.blog-post-sidebar-author {
  font-size: 15px;

  @include breakpoint(m) { display: none; }
}

.blog-post-tag {
  padding: 4px 8px;
  color: $body-color;
  background-color: $input-background-color;
  border-radius: 2px;
}

/* scss-combine:general/rte */
.rte {

  // headings
  h1,
  h2,
  h3,
  h4,
  h5 {
    margin-top: 25px;
    margin-bottom: 25px;
  }

  h1 {
    margin-top: 35px;
    margin-bottom: 35px;
    font-size: 22px;
  }

  h2 { font-size: 20px; }
  h3 { font-size: 15px; }
  h4 { font-size: 13px; }
  h5 { font-size: 11px; }

  // Text
  p {
    line-height: 1.75;
  }

  blockquote {
    padding-left: 18px;
    margin: 0;
    letter-spacing: 0.025em;
    border-left: 2px solid $border-color;
  }

  code,
  pre {
    font-family: $mono-font;
    background-color: $input-background-color;
  }

  pre { padding: 20px; }

  ul,
  ol {
    margin-bottom: $gutter;
    margin-left: $gutter * 2;

    ul,
    ol {
      margin-bottom: 0;
      margin-left: $gutter;
    }

    li {
      padding: 0;
      padding-left: 5px;
      margin-bottom: 3px;

      // scss-lint:disable NestingDepth
      &:last-of-type { margin-bottom: 0; }
    }
  }

  ul { list-style: disc; }
}

.rss-feed-item {
  border-bottom: 1px solid $border-color;
}

/* scss-combine:general/print */
@media print {
  .main-menu,
  .search-form,
  .navigation-toggle,
  .products-related,
  .footer-navigation,
  .footer-site-subscribe {
    display: none;
  }
}

// Products
/* scss-combine:product/product-grid */
.products-featured,
.products-new,
.products-related {
  padding: $gutter * 2;

  @include breakpoint(m) { padding: $gutter;}

  .product-container &,
  .cart-empty & {
    @include container(960px);
    padding-top: $gutter * 3;
    padding-bottom: $gutter * 5;

    @include breakpoint(l-only) {
      padding-right: $gutter * 2;
      padding-left: $gutter * 2;
    }

    @include breakpoint(xl-up) { @include container(85%) };
  }

  .section-title {
    margin-bottom: 40px;
  }
}

.product-grid {
  @include container();
}

.product-item {
  .product-grid & {
    margin-bottom: $gutter * 2;

    // Grid defaults to Small: 2 column, Medium: 3 column, Large: 4 column
    @include breakpoint(s) { @include with-layout($grid-small) { @include gallery(6 of 12); } }
    @include breakpoint(m-only) { @include with-layout($grid-small) { @include gallery(6 of 12); } }
    @include breakpoint(l-up) { @include gallery(3 of 12); }
  }

  // Grid column overrides
  .grid-m-2 & { @include breakpoint(m) { @include with-layout($grid-small) { @include gallery(6 of 12); } } }
  .grid-l-3 & { @include breakpoint(l-up) { @include gallery(4 of 12); } }
}

// Sale badge
.sale-badge {
  padding: 2px 5px;
  letter-spacing: normal;
  line-height: 1.62;
  color: $body-background-color;
  background-color: $highlight-color;
}

/* scss-combine:product/product-item */
.product-item-thumbnail {
  position: relative;
}

.product-item-image {
  display: block;

  .aspect-default-ratio & {
    background: none !important;
  }

  img {
    width: 100%;
  }
}

.product-item-title {
  margin-top: 12px;
  margin-bottom: 7px;
  font-family: $primary-font;
  font-size: 15px;
  
  a { color: #f37e8b; }
}

.product-item-price {
  margin-top: 7px;
  margin-bottom: 7px;
  color: $lighter-text;
}

// Product Options

// Quickshop link
.product-item-quickshop {
  position: absolute;
  bottom: $gutter;
  left: 50%;
  z-index: index($elements, product-item-options);
  width: calc(100% - (#{$gutter} * 2));
  transform: translateX(-50%);
}

.product-item-wishlist,
.product-item-compare {
  position: absolute;
  top: 10px;
  z-index: index($elements, product-item-options);
  font-family: $primary-font;
  font-weight: bold;
  color: $accent-color;
}


// Wishlist link
.product-item-wishlist {
  right: $gutter;

  .icon-wishlist {
    width: 15px;
    height: 15px;
    margin-right: 5px;
    vertical-align: sub;
  }
}

// Compare form
.product-item-compare {
  left: $gutter;
  margin-bottom: 0;

  .form-label-text:before {
    // scss-lint:disable ImportantRule
    margin-right: 8px !important;
  }
}

// Thumbnail options fade
.product-item-quickshop,
.product-item-compare,
.product-item-wishlist {
  @include breakpoint(m) { display: none; }

  @include breakpoint(l-up) {
    opacity: 0;
    transition: opacity 0.25s $ease-out-quad;

    + .product-item-image:before {
      position: absolute;
      position: relative;
      top: 0;
      left: 0;
      z-index: index($elements, product-item-image);
      display: block;
      width: 100%;
      height: 100%;
      background-color: rgba($white, 0.92);
      content: "";
      opacity: 0;
      transition: opacity 0.25s $ease-out-quad;
    }

    .product-item-thumbnail:hover & {
      opacity: 1;

      + .product-item-image:before { opacity: 1; }
    }
  }
}

.aspect-one-by-one,
.aspect-four-by-five,
.aspect-two-by-three {
  .product-item-thumbnail {
    position: relative;
    width: 100%;
    overflow: hidden;

    &:before {
      display: block;
      width: 100%;
      content: "";
    }

    .product-item-image {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      overflow: hidden;
      background-position: center;
      background-repeat: no-repeat;
      background-size: cover;

      .hide-for-ratio {
        @extend %visually-hidden;
      }
    }
  }
}

.product-item-thumbnail {
  &:before {
    .aspect-one-by-one & {
      padding-top: 100%;
    }
    .aspect-four-by-five & {
      padding-top: 125%;
    }
    .aspect-two-by-three & {
      padding-top: 150%;
    }
  }
}

/* scss-combine:product/product-rating */
.rating-stars,
.rating-stars-readonly {
  // margin-right: 6px;
  font-size: 0;
  color: $star-color;
  // vertical-align: text-top;
  vertical-align: sub;

  .rating-star {
    display: inline-block;
    width: 14px;
    height: 14px;
    margin-right: 2px;

    &:last-of-type {
      margin-right: 0;
    }
  }
}

.ratings-count-text {
  font-size: $font-size;
}

/* scss-combine:product/product-price */
.price {
  font-family: $price-font;
  color: $lighter-text;

  .product-header & {
    margin-top: 8px;
    margin-bottom: 8px;
    font-size: 18px;
    line-height: 1.2;
  }
}

.price-withouttax,
.price-withtax,
.price-saved {
  // display: block;
  margin-bottom: 4px;

  .product-item & { margin-bottom: 2px; }
  &:last-of-type { margin-bottom: 5px; }
}

.price-rrp {
  margin-right: $gutter / 2;
  text-decoration: line-through;

  + .price-value {
    font-weight: bold;
    color: $highlight-color;
  }
}

.price-value {
  margin-right: $gutter / 2;
}

.price-tax-label {
  font-size: 12px;
  color: $lightest-text;
}

.price-saved {
  font-size: 12px;
  color: $body-color;
}

// Hides tax labels in the product grid when the store only displays 1 price
.product-item .price {
  .price-tax-label {
    display: none;
  }

  &.multiple-prices .price-tax-label {
    display: inline;
  }
}

// Call for price
.product-call-for-price {
  font-family: $primary-font;
  font-weight: bold;
  color: $lighter-text;
}

/* scss-combine:product/quick-shop */
.quick-shop-modal {

  opacity: 1;
  transition: opacity 0.2s $ease-out-quad;
  margin-top: 2% !important;

  @include breakpoint(m-up) { max-width: calc(100% - (#{$gutter} * 4)); }
  @include media($min: 1360px) { max-width: $max-width; }

  // for fading in once the ajax request has completed
  .modal-wrapper.loaded & { opacity: 1; }

  // Overrides for some product styling
  .product-details,
  .product-info .form { border-bottom: 0; }

  .product-main-image {
    text-align: center;

    .product-image { max-height: 600px; }
  }
}


// Pages
/* scss-combine:pages/product */
.product-details,
.product-reviews {
  @extend %content-padding;
  @include container();
  padding-top: $gutter * 3;
  padding-bottom: $gutter * 5;
}

.product-details,
.product-reviews-container {
  border-bottom: 1px solid $border-color;
}

.product-images {
  text-align: center;

  @include breakpoint(l-up) {
    @include with-layout($product) { @include span(first 9 of 16); }
  }
}

.product-info {
  @include breakpoint(l-up) {
    @include with-layout($product) { @include span(last 7 of 16); }
  }

  .form {
    margin-bottom: $gutter * 1.5;
    border-bottom: 1px solid $border-color;
  }
}

.product-header {
  margin-bottom: 20px;
}

.product-title {
  margin-top: 0;
  margin-bottom: 0;
  font-size: 28px;
  color: #f37e8b;
  
  @include breakpoint(m) {
    font-size: 20px;
  }
}

.product-brand {
  display: block;
  font-family: $primary-font;
  color: $lighter-text;

  .product-header & {
    margin-bottom: 8px;
    font-size: 15px;
  }
}

// Product Detail Styles
.product-detail-container {
  margin-bottom: $gutter * 1.5;
  
  p { font-size: 16px; }
}

.product-detail {
  margin-bottom: $gutter / 3;
  font-family: $primary-font;
  color: $lightest-text;
}

.product-detail-key {
  font-weight: bold;
  color: $section-title-color;

  &:after {
    content: ":";
  }
}

// Product Share & Wishlist
.product-share-container {
  @extend %clearfix;

  .share-buttons-nav {
    float: left;
  }

  .wishlist {
    float: right;
    font-family: $primary-font;
    font-weight: bold;

    .icon-wishlist {
      width: 15px;
      height: 15px;
      margin-right: 5px;
      vertical-align: text-bottom;
    }
  }
}

// Custom Fields
.product-details-name,
.product-details-value {
  display: inline-block;
  margin: 0;
}

.product-details-name {
  margin-right: 4px;
  font-weight: bold;
}

// Product Image Thumbnails
// Todo: put a height on the image container so they don't jump up and down
.product-thumbnails {
  margin-top: 20px;
  margin-bottom: $gutter * 2;
  font-size: 0;
  text-align: center;
}

.product-thumbnail {
  position: relative;
  z-index: 0;
  display: inline-block;
  margin-right: $gutter;
  margin-bottom: $gutter;
  cursor: pointer;

  &:last-of-type {
    margin-right: 0;
  }

  > img {
    display: block;
    // max-height: 40px;
  }

  &.active:after {
    position: absolute;
    top: -4px;
    right: -4px;
    bottom: -4px;
    left: -4px;
    z-index: -1;
    display: block;
    border: 2px solid $check-border-color;
    border-radius: 3px;
    content: "";
  }
}

// Product Reviews
.product-reviews {
  @include container(900px);

  .product-review-heading {
    margin-bottom: 10px;
  }

  > .rating-stars {
    width: 100%;
    text-align: center;

    svg {
      width: 18px;
      height: 18px;
    }
  }
}

.rating-header {
  @extend %clearfix;
  margin-top: 40px;
  margin-bottom: 10px;

  .rating-summary {
    @include breakpoint(s) {
      margin-bottom: 25px;
    }

    @include breakpoint(m-up) {
      float: left;
    }
  }

  .review-link {
    @include breakpoint(m-up) {
      float: right;
    }
  }
}

.review-item {
  padding-top: 40px;
  padding-bottom: 40px;
  font-size: 14px;
  border-bottom: 1px solid $border-color;

  &.supplementary {
    display: none;

    .all-reviews-visible & { display: block; }
  }

  &:last-of-type {
    padding-bottom: 0;
    border-bottom: 0;
  }
}

.view-all-reviews-button {
  margin-top: 20px;
}

.review-item-score {
  @extend %visually-hidden;
}

.review-item-title {
  margin-top: 5px;
  margin-bottom: 5px;
  font-size: 18px;
}

.review-item-meta {
  margin-bottom: 20px;
  color: $lightest-text;
}

// Error container
.product-review-messages > .alert {
  margin-bottom: $gutter * 2;
}

/* scss-combine:pages/collections */
.collection {
  position: relative;

  .page-heading {
    @include breakpoint(m) {
      margin-top: 15px;
      margin-bottom: 20px;
    }

    @include breakpoint(l-up) {
      margin-top: 0;
      margin-bottom: 50px;
    }
  }
}

.form-field-product-sort {
  @include breakpoint(m) { margin-bottom: $gutter / 2; }
}

.sort-by,
.facet-clear-all {
  @include breakpoint(m) {
    display: block;
    margin-right: auto;
    margin-left: auto;
    text-align: center;
  }
}

.sort-by {
  @include breakpoint(l-up) {
    position: absolute;
    top: $gutter * 2;
    right: $gutter * 2;
    text-align: right;
  }

  .form-select-wrapper {
    display: inline-block;
    min-height: 30px;
    padding: 4px ($gutter * 2) 4px ($gutter * 2 / 3);
    font-size: 13px;
    text-align: left;
  }
}

.facet-clear-all {
  padding-top: 5px;
  padding-bottom: 5px;
  font-family: $primary-font;

  @include breakpoint(m) {
    max-width: 150px;
    padding-top: 10px;
    padding-bottom: 10px;
    text-align: center;
  }

  @include breakpoint(l-up) {
    position: absolute;
    top: $gutter * 2;
    left: ($gutter * 2) + 10;
  }
}

.collection-sidebar {
  @include breakpoint(m) {
    @include span(12 of 12);
    margin-bottom: 40px;
  }

  @include breakpoint(l-up) {
    @include span(first 2.5 of 12);
    padding-right: 10px;
  }
}

.collection-product-listing,
.category-description {
  @include breakpoint(m) {
    @include span(12 of 12);
    margin-bottom: 40px;
  }

  @include breakpoint(l-up) {
    @include span(12 of 12);

    &.with-sidebar {
      @include span(last 9.5 of 12);
      padding-left: 50px;
      border-left: 1px solid $border-color;
    }
  }
}

.facet-section-heading,
.sidebar-section-heading,
.shop-by-item,
.category-nav-list-item,
.facet-option > li,
.form-range-facet ,
.nav-list li {
  @include breakpoint(l-up) {
    padding-left: 10px;
  }
}

.facet-section-heading,
.sidebar-section-heading {
  position: relative;
  margin-top: $gutter;
  margin-bottom: $gutter;
  font-size: 14px;
  user-select: none;

  .facet-toggle {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
}

.shop-by {
  margin-bottom: 20px;
  border-bottom: 1px solid $border-color;

  &:last-of-type { border-bottom: 0; }
}

.facet-toggle {
  cursor: pointer;

  .icon-close-small {
    // scss-lint:disable PropertySortOrder
    position: absolute;
    top: 50%;
    right: 0;
    width: 16px;
    height: 16px;
    vertical-align: text-bottom;
    transform: translateY(-50%) rotate(0);
    transition: all 0.2s $ease-out-quad;

    // Increase click area size
    padding: 6px;
    box-sizing: content-box;
  }

  &.is-open .icon-close-small {
    transform: translateY(-50%) rotate(45deg);
  }
}

.facet-filter-wrapper {
  display: none;

  &.is-open {
    display: block;
  }
}

.facet-option,
.shop-by-list,
.category-nav-list,
.nav-list {
  display: none;
  margin-bottom: 20px;

  &.is-open {
    display: block;
  }

  > li {
    padding-top: 3px;
    padding-bottom: 3px;
    margin-bottom: 2px;

    &:last-of-type { margin-bottom: 0; }

    > a {
      display: block;
      letter-spacing: 0.025em;
      color: $lighter-text;
    }

    &.facet-selected,
    &.is-active {
      background-color: $input-background-color;

      @include breakpoint(m) {
        padding-right: $gutter / 2;
        padding-left: $gutter / 2;
      }
    }
  }

  .facet-more {
    display: none;
    font-size: 12px;
    text-transform: uppercase;
  }

  .hidden + .facet-more { display: block;}
}

.facet-option {
  display: block;
}

.shop-by-list,
.category-nav-list { display: block; }

.facet-clear {
  float: right;
  font-weight: normal;
}

.facet-filter,
.category-nav {
  border-bottom: 1px solid $border-color;

  @include breakpoint(m) { clear: left; }

  &:last-of-type { border-bottom: 0; }
}

.form-field-range {
  @include container();

  .field-min { @include span(first 6 of 12); }
  .field-max { @include span(last 6 of 12); }

  .form-field-control { margin-bottom: $gutter / 2; }

  .form-input {
    padding-right: 5px;
    padding-left: 5px;
    text-align: center;

    &::placeholder { text-align: center;}
    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
    }
  }

  .button { width: 100%; }
}

.facet-rating {
  .product-rating {
    display: inline-block;
    vertical-align: text-top;
  }

  .rating-count {
    color: $lightest-text;
  }

  .rating-label {
    display: block;
  }
}

// Collection Empty
.collection-empty {
  text-align: center;

  .search-again {
    margin-bottom: 25px;
    font-size: $font-size;
    font-weight: normal;
  }

  .faceted-search-form {
    margin-bottom: 100px;
  }

  .faceted-search-input,
  .faceted-search-submit {
    display: inline-block;
    margin-bottom: $gutter;
  }

  .faceted-search-input {
    height: 42px;
    max-width: 350px;
    margin-right: $gutter;
  }

  .faceted-search-input { width: 250px; }
}

.faceted-show-more-button {
  display: block;
  padding-left: 10px;
  margin-bottom: $gutter;

  .toggle-link-text-on {
    display: none;
  }
}

[data-collection-sidebar] {
  .loading {
    display: none;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background: #fff;
    opacity: 0.8;

    &.visible {
      display: block;
    }
  }
}

.category-image {
  display: block;
  margin: 0 auto $gutter * 2;
}
/* scss-combine:pages/compare */
.compare-content {
  @include breakpoint(m) {
    overflow-x: auto;
  }
}

.header-column {
  background-color: transparent;

  @include breakpoint(m) {
    display: none;
  }

  @include breakpoint(l-up) {
    max-width: 115px;
  }
}

.compare-table {
  text-align: center;
  border-width: 0;

  .button {
    width: 100%;
    max-width: 200px;
    padding: 11px 0 10px;
    margin: 10px 0;
    font-size: 13px;
  }
}

.compare-empty-cell { border: 0; }

.compare-table-cell,
.compare-table-heading,
.compare-empty-cell {
  padding: 18px 20px;
  border-top: 1px solid $border-color;
  border-left: 0;

  .compare-main-row & {
    padding-bottom: 0;
    text-align: left;
    border-top: 0;
  }

  .compare-quickshop-row & {
    padding-top: 0;
    border-top: 0;
  }
}

.compare-table-cell {
  min-width: 230px;

  &:last-of-type { padding-right: 0; }
}

.compare-table-heading {
  padding-left: 0;
  text-align: left;
  vertical-align: top;
}

.compare-remove {
  display: block;
}

.compare-description-row,
.compare-availability-row {
  text-align: left;
  vertical-align: top;
}

.compare-rating-row {
  .compare-no-rating {
    opacity: 0.6;
  }
}

/* scss-combine:pages/contact */
.page-message-area {
  padding-bottom: $gutter;
  margin-bottom: $gutter * 2;
  border-bottom: 1px solid $border-color;
}

.contact-us {
  .form { @include container; }

  .form-field-text,
  .form-field-email {
    @include breakpoint(l-up) {
      &:nth-of-type(odd) { @include span(first 6 of 12); }
      &:nth-of-type(even) { @include span(last 6 of 12); }
    }
  }

  .form-field-multiline {
    clear: both;
  }
}

// scss-lint:disable PlaceholderInExtend
.button-contact-submit { @extend .button-primary; }

/* scss-combine:pages/errors */
.error-page {
  p { text-align: center; }
}

.error-search-form {
  margin-top: $gutter * 2;
  text-align: center;

  .form-input {
    display: inline-block;
    max-width: 350px;
    height: 42px;
    margin-right: $gutter;
  }
}

/* scss-combine:pages/brands */
.brands-grid {
  @include container;
}

.brand-item {
  text-align: center;

  @include breakpoint(m) { @include gallery(6 of 12); }
  @include breakpoint(l-up) { @include gallery(4 of 12); }
}

/* scss-combine:pages/sitemap */
.sitemap-content {
  @include container(960px);
}

.sitemap-group {
  @include breakpoint(m-up) {
    @include gallery(6 of 12);
  }

  @include breakpoint(l-up) {
    @include gallery(4 of 12);
  }

  > ul {
    margin-bottom: $gutter * 2;

    ul {
      margin-bottom: $gutter / 2;
      margin-left: $gutter / 2;
    }
  }

  li { margin: $gutter / 4 0; }

  a { color: inherit; }
}

.sitemap-title {
  @extend %section-title-text-treatment;
  font-size: 20px;
}


// Cart
/* scss-combine:cart/cart-content */
.cart-container {
  @extend %content-padding;
  @include container();
  margin-top: $gutter * 3;
  margin-bottom: $gutter * 3;
}

.cart-header {
  @extend %section-title-text-treatment;
  margin-bottom: $gutter * 3;
  font-size: 11px;
  font-weight: normal;
  color: $lightest-text;
  text-transform: uppercase;

  .cart-product {
    @include span(first 7 of 12);
  }

  .cart-each,
  .cart-quantity,
  .cart-total {
    @include breakpoint(s) { display: none; }
  }
}

.cart-cell {
  // Stops empty cells from collapsing
  min-height: 1px;
}

.cart-image {
  @include breakpoint(s) { @include span(first 3 of 12); }
  @include breakpoint(m-up) { @include span(first 1.5 of 12); }
}

.cart-product {
  @include breakpoint(s) { margin-bottom: $gutter; }
  @include breakpoint(m-up) { @include span(5.5 of 12); }
}

.cart-product,
.cart-each,
.cart-total {
  @include breakpoint(s) {
    @include span(last 9 of 12);
    padding-right: $gutter;
  }
}

.cart-header,
.cart-row {
  @include container();

  .cart-each,
  .cart-quantity,
  .cart-total {
    @include breakpoint(m-up) {
      @include span(1.5 of 12);
      text-align: center;
    }
  }

  .cart-remove {
    @include breakpoint(m-up) { @include span(last 0.5 of 12); }
  }
}

.cart-row {
  position: relative;
  margin-bottom: $gutter * 2;

  &:last-of-type { margin-bottom: 0; }

  .cart-product,
  .cart-each,
  .cart-quantity,
  .cart-total {
    font-size: 14px;
    color: $lighter-text;
  }

  .cart-each,
  .cart-total,
  .cart-remove {
    @include breakpoint(m-up) { line-height: 40px; };
  }

  .cart-total {
    @include breakpoint(s) { margin-bottom: 20px; }
  }

  .cart-item-name {
    @extend %heading-text-treatment;
    display: block;
    color: $accent-color;
  }

  .cart-item-options {
    @extend %clearfix;
    font-size: 12px;
    color: $lighter-text;

    dt,
    dd {
      display: inline-block;
      float: left;
    }

    dt { clear: left; }
    dd { margin-left: 2px; }
  }

  .gift-wrap {
    margin-top: $gutter;
    font-size: 11px;

    > dt,
    > dd {
      display: inline-block;
      margin: 0;
    }

    > dt { font-weight: bold; }
    > dd { margin-right: 2px; }
  }

  .cart-price-label {
    margin-right: 5px;

    @include breakpoint(m-up) {
      display: none;
    }
  }
}

.cart-quantity {
  @include breakpoint(s) {
    position: absolute;
    right: 0;
    bottom: 0;
    width: 100px;
    text-align: center;
  }

  .form-field-quantity-control {
    margin-right: 0;
    margin-bottom: 4px;

    @include breakpoint(s) { display: block; }
  }
}

.cart-update-quantity {
  font-size: 11px;
  color: $accent-color;
  cursor: pointer;
}

.cart-remove {
  @include breakpoint(s) {
    position: absolute;
    top: 0;
    right: 0;
  }

  > a { color: $body-color; }

  .icon-close {
    width: 12px;
    height: 12px;
  }
}

// Empty Cart
.cart-empty {
  .cart-container {
    padding-bottom: 100px;
    margin-bottom: 0;
    text-align: center;
    border-bottom: 1px solid $border-color;
  }
}

.empty-cart-message {
  margin-bottom: $gutter * 2;
  color: $lighter-text;
}

.price-discounted {
  text-decoration: line-through;
}
/* scss-combine:cart/cart-footer */
.cart-footer {
  @include container();
  padding-top: $gutter * 2;
  margin-top: $gutter * 3;
  font-family: $primary-font;
  border-top: 1px solid $border-color;
}

// Continue Shopping
.continue-shopping {
  @include breakpoint(s) {
    @include span(12 of 12);
    text-align: center;
  }

  @include breakpoint(m-only) { @include span(first 6 of 12); }
  @include breakpoint(l-up) { @include span(first 4 of 12); }
  margin-top: $gutter;

  > a {
    font-size: 14px;
    letter-spacing: 0.05em;
  };
}

// Cart Totals
.cart-totals {
  @include breakpoint(s) { @include span(12 of 12); }
  @include breakpoint(m-only) { @include span(last 6 of 12); }
  @include breakpoint(l-up) { @include span(last 4 of 12); }
  margin-bottom: $gutter * 4;
}

.cart-totals-rows {
  margin-bottom: $gutter * 2;
}

.cart-totals-row {
  @include container();
  margin-bottom: $gutter;

  &:last-of-type { margin-bottom: 0; }

  .form-field { @include container(); }
}

.cart-totals-label {
  @include span(first 8 of 12);
  font-size: 14px;
}

.cart-totals-value {
  @include span(last 4 of 12);
  font-size: 15px;
  color: $lighter-text;
  text-align: right;
}

.order-total {
  padding-top: $gutter;
  font-weight: bold;
  border-top: 1px solid $border-color;

  .cart-totals-label {
    font-size: 11px;
    letter-spacing: 0.05em;
    color: $body-color;
    text-transform: uppercase;
  }

  .cart-totals-value {
    font-size: 17px;
    color: $body-color;
  }
}

.cart-actions-row {
  .button {
    width: 100%;
  }
}

.form-gift-certificate,
.form-coupon-code {
  @include container;

  .form-input {
    @include span(first 9 of 12);
    height: 38px;
    line-height: 38px;
  }

  .button {
    @include span(last 3 of 12);
    height: 38px;
    min-width: 0;
    padding: 0;
    line-height: 38px;
  }
}

.cart-coupon-codes,
.cart-gift-certificates {
  margin-bottom: 5px;

  .cart-code-remove {
    font-size: 12px;
  }
}

.form-shipping {
  display: none;
  padding: $gutter;
  margin-top: $gutter;
  margin-bottom: $gutter;
  background-color: lighten($input-background-color, 2.5%);

  .visible & {
    display: block;
  }

  .label-state { @include span(first 7 of 12); }
  .label-zip { @include span(last 5 of 12); }

  .form-input { background: $white; }
}

.shipping-toggle {
  float: right;
  color: $accent-color;
  cursor: pointer;
}

.shipping-quotes {
  .form-field {
    padding: $gutter;
    background-color: lighten($input-background-color, 2.5%);
  }

  .form-label-text {
    .ups-shipping-badge {
      vertical-align: middle;
      margin-top: -2px;
      margin-right: 3px;
    }
  }
}

// workaround to override funky formatting of paypal button
.additional-checkout-buttons {
  @extend %clearfix;
  text-align: center;

  // scss-lint:disable ImportantRule, QualifyingElement
  p { float: none !important; }

  form { clear: both;}
}

/* scss-combine:cart/giftwrap */
.giftwrap-modal {
  max-width: 600px;
  opacity: 0;
  transition: opacity 0.2s $ease-out-quad;

  // for fading in once the ajax request has completed
  .modal-wrapper.loaded & { opacity: 1; }
}

.giftwrap-single,
.giftwrap-multiple {
  .form-label {
    @include container();
  }

  .form-field-title {
    @include breakpoint(m-only) { @include span(first 3 of 12); }
    @include breakpoint(l-up) { @include span(first 2 of 12); }
  }

  .form-field-control {
    @include breakpoint(m-only) { @include span(last 9 of 12); }
    @include breakpoint(l-up) { @include span(last 10 of 12); }
  }

  .form-select-wrapper,
  .form-input {
    max-width: 400px;
  }
}

.giftwrap-form {
  .form-radio + .form-label-text {
    font-weight: bold;
  }
}

.giftwrap-meta {
  display: block;
  margin-top: 5px;
  color: $lighter-text;
}

/* scss-combine:cart/apple-pay-button */
.apple-pay-checkout-button {
  display: none;
  height: 42px;
  background: {
    position: 50% 50%;
    repeat: no-repeat;
    size: 100% 60%;
  }
  border-radius: 3px;

  @if stencilString("apple_pay_style") == "white" {
    background-color: white;
    background-image: -webkit-named-image(apple-pay-logo-black);
  } @else if stencilString("apple_pay_style") == "white-border" {
    background-color: white;
    background-image: -webkit-named-image(apple-pay-logo-black);
    border: 0.5px solid black;
  } @else {
    background-image: -webkit-named-image(apple-pay-logo-white);
    background-color: black;
  }

  .additional-checkout-buttons & {
    margin-bottom: 15px;
  }

  .apple-pay-supported & {
    display: block;
  }
}

// Modules
/* scss-combine:modules/flickity */
/*! Flickity v2.0.5
http://flickity.metafizzy.co
---------------------------------------------- */

.flickity-enabled {
  position: relative;
}

.flickity-enabled:focus {
  outline: none;
}

.flickity-viewport {
  overflow: hidden;
  position: relative;
  height: 100%;
}

.flickity-slider {
  position: absolute;
  width: 100%;
  height: 100%;
}

/* draggable */

.flickity-enabled.is-draggable {
  -webkit-tap-highlight-color: transparent;
  tap-highlight-color: transparent;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.flickity-enabled.is-draggable .flickity-viewport {
  cursor: move;
  cursor: -webkit-grab;
  cursor: grab;
}

.flickity-enabled.is-draggable .flickity-viewport.is-pointer-down {
  cursor: -webkit-grabbing;
  cursor: grabbing;
}

/* ---- previous/next buttons ---- */

.flickity-prev-next-button {
  position: absolute;
  top: 50%;
  width: 44px;
  height: 44px;
  border: none;
  border-radius: 50%;
  background: white;
  background: hsla(0, 0%, 100%, 0.75);
  cursor: pointer;
  /* vertically center */
  -webkit-transform: translateY(-50%);
  transform: translateY(-50%);
}

.flickity-prev-next-button:hover {
  background: white;
}

.flickity-prev-next-button:focus {
  outline: none;
  box-shadow: 0 0 0 5px #09F;
}

.flickity-prev-next-button:active {
  opacity: 0.6;
}

.flickity-prev-next-button.previous {
  left: 10px;
}

.flickity-prev-next-button.next {
  right: 10px;
}

/* right to left */
.flickity-rtl .flickity-prev-next-button.previous {
  left: auto;
  right: 10px;
}

.flickity-rtl .flickity-prev-next-button.next {
  right: auto;
  left: 10px;
}

.flickity-prev-next-button:disabled {
  opacity: 0.3;
  cursor: auto;
}

.flickity-prev-next-button svg {
  position: absolute;
  left: 20%;
  top: 20%;
  width: 60%;
  height: 60%;
}

.flickity-prev-next-button .arrow {
  fill: #333;
}

/* ---- page dots ---- */

.flickity-page-dots {
  position: absolute;
  width: 100%;
  bottom: -25px;
  padding: 0;
  margin: 0;
  list-style: none;
  text-align: center;
  line-height: 1;
}

.flickity-rtl .flickity-page-dots {
  direction: rtl;
}

.flickity-page-dots .dot {
  display: inline-block;
  width: 10px;
  height: 10px;
  margin: 0 8px;
  background: #333;
  border-radius: 50%;
  opacity: 0.25;
  cursor: pointer;
}

.flickity-page-dots .dot.is-selected {
  opacity: 1;
}

/* scss-combine:modules/mosaic */
// mosaic-item tiles are 0 indexed

// mosaic layout
.mosaic {
  position: relative;
  z-index: index($elements, mosaic);
  width: 100%;
  margin-top: -1px;
}

.mosaic-item {
  position: absolute;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}

.mosaic-count-1 {
  .mosaic-item-0 {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    
    background-image: none  !important;
  }
}

@include breakpoint(s) {
  .mosaic-item {
    position: relative;
    // scss-lint:disable ImportantRule
    background-image: none !important;
  }
}

@include breakpoint(m-only) {
  .mosaic {
    display: block;
    padding-top: 200%;
  }

  // initial mosaic item is almost always displayed the same on medium screens
  .mosaic-item-0 {
    top: 0;
    left: 0;
    width: 100%;
    height: 50%;
  }

  // layout for 1 tile
  .mosaic-count-1 {
    // padding-top: 100%;
    padding-top: 30%;
  }

  // layout for 2 tiles
  .mosaic-count-2 {
    .mosaic-item-1 {
      bottom: 0;
      left: 0;
      width: 100%;
      height: 50%;
    }
  }

  // layout for 3 tiles
  .mosaic-count-3 {
    padding-top: 150%;

    .mosaic-item-0 { height: 66.7%; }

    .mosaic-item-1,
    .mosaic-item-2 {
      bottom: 0;
      width: 50%;
      height: 33.3%;
    }

    .mosaic-item-1 { left: 0; }
    .mosaic-item-2 { left: 50%; }
  }

  // layout for 4 tiles
  .mosaic-count-4 {
    .mosaic-item-1,
    .mosaic-item-2,
    .mosaic-item-3 { height: 25%; }

    .mosaic-item-1,
    .mosaic-item-2 {
      bottom: 0;
      width: 50%;
    }

    .mosaic-item-1 { left: 0; }
    .mosaic-item-2 { left: 50%; }

    .mosaic-item-3 {
      top: 50%;
      left: 0;
      width: 100%;
    }
  }

  // layout for 5 tiles
  .mosaic-count-5 {
    .mosaic-item-1,
    .mosaic-item-2,
    .mosaic-item-3,
    .mosaic-item-4 {
      width: 50%;
      height: 25%;
    }

    .mosaic-item-1,
    .mosaic-item-2 { top: 50%; }

    .mosaic-item-3,
    .mosaic-item-4 { bottom: 0; }

    .mosaic-item-1 { left: 0; }
    .mosaic-item-2 { left: 50%; }
    .mosaic-item-3 { left: 0; }
    .mosaic-item-4 { left: 50%; }
  }
}


@include breakpoint(l-up) {
  .mosaic {
    // padding-top: 50%;
    padding-top: 30%;
  }

  // layout for 2 tiles
  .mosaic-count-2 {
    .mosaic-item-0,
    .mosaic-item-1 {
      top: 0;
      width: 50%;
      height: 100%;
    }

    .mosaic-item-0 { left: 0; }
    .mosaic-item-1 { left: 50%; }
  }

  // layout for 3 tiles
  .mosaic-count-3 {
    .mosaic-item-0,
    .mosaic-item-1,
    .mosaic-item-2 { width: 50%; }

    .mosaic-item-0 {
      top: 0;
      left: 0;
      height: 100%;
    }

    .mosaic-item-1,
    .mosaic-item-2 {
      left: 50%;
      height: 50%;
    }

    .mosaic-item-1 { top: 0; }
    .mosaic-item-2 { top: 50%; }
  }

  // layout for 4 tiles
  .mosaic-count-4 {
    .mosaic-item-0 {
      top: 0;
      left: 0;
      width: 50%;
      height: 100%;
    }

    .mosaic-item-1,
    .mosaic-item-2,
    .mosaic-item-3 { height: 50%; }

    .mosaic-item-1,
    .mosaic-item-2 {
      top: 0;
      width: 25%;
      height: 50%;
    }

    .mosaic-item-1 { left: 50%; }
    .mosaic-item-2 { left: 75%; }

    .mosaic-item-3 {
      top: 50%;
      left: 50%;
      width: 50%;
    }
  }

  // layout for 5 tiles
  .mosaic-count-5 {
    .mosaic-item-0 {
      top: 0;
      left: 0;
      width: 50%;
      height: 100%;
    }

    .mosaic-item-1,
    .mosaic-item-2,
    .mosaic-item-3,
    .mosaic-item-4 {
      width: 25%;
      height: 50%;
    }

    .mosaic-item-1,
    .mosaic-item-2 { top: 0; }

    .mosaic-item-3,
    .mosaic-item-4 { top: 50%; }

    .mosaic-item-1 { left: 50%; }
    .mosaic-item-2 { left: 75%; }
    .mosaic-item-3 { left: 50%; }
    .mosaic-item-4 { left: 75%; }
  }
}

// Mosaic item text

.mosaic-item-heading,
.mosaic-item-caption {
  color: $mosaic-text-color;
}

.mosaic-button {
  color: $mosaic-button-text;
  background-color: $mosaic-button-background;
  border-color: $mosaic-button-background;
}

.mosaic-item-info {
  position: absolute;
  top: 50%;
  right: $gutter * 2;
  left: $gutter * 2;
  text-align: center;
  transform: translateY(-50%);

  .mosaic-item-heading {
    margin-top: 0;
    margin-bottom: 10px;
    font-size: 30px;
  }

  .mosaic-item-caption {
    margin-top: 10px;
    margin-bottom: 10px;
    font-size: 20px;
    @include breakpoint(l-up) { font-size: 15px; }
  }
}

.mosaic-item-link {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
  width: 100%;
  height: 100%;
}

// Mosaic Image -- Only for Small screens

.mosaic-item-image {
  display: block;
  width: 100%;
  max-width: none;

  @include breakpoint(m-up) {
    // display: none;
  }
}

/* scss-combine:modules/slideshow */
// Carousel
.slideshow {
  width: 100%;
  height: 100%;
  overflow: visible;
  clear: both;
}

.flickity-viewport {
  position: relative;

  @include maintain-ratio(1.5 1);
  background-size: cover;

  .ratio-3-1 & {
    @include maintain-ratio(3 1);
  }

  .ratio-16-9 & {
    @include maintain-ratio(16 9);
  }

  @include breakpoint(xs) {
    @include maintain-ratio;
  }
}

.slideshow-item {
  background-position: center top;
  padding-bottom: 0;

  @include maintain-ratio(1.5 1);
  background-size: cover;

  .ratio-3-1 & {
    @include maintain-ratio(3 1);
    background-position: center center;
  }

  .ratio-16-9 & {
    @include maintain-ratio(16 9);
    background-position: center center;
  }

  @include breakpoint(xs) {
    @include maintain-ratio;
    background-position: center center;
  }
}

// slideshow item text

.slideshow-item-heading,
.slideshow-item-caption {
  color: $mosaic-text-color;
}

.slideshow-button {
  color: $mosaic-button-text;
  background-color: $mosaic-button-background;
  border-color: $mosaic-button-background;
}

.slideshow-item-info {
  position: absolute;
  top: 50%;
  right: $gutter * 2;
  left: $gutter * 2;
  text-align: center;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 1);
  transform: translateY(-50%);

  .slideshow-item-heading {
    margin-top: 0;
    margin-bottom: 10px;
    font-size: 30px;
  }

  .slideshow-item-caption {
    margin-top: 10px;
    margin-bottom: 10px;
    font-size: 20px;
    @include breakpoint(l-up) {
      font-size: 15px;
    }
  }
}

.slideshow-item-link {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
  width: 100%;
  height: 100%;
}

.flickity-page-dots {
  bottom: $gutter;

  .dot {
    background: $accent-color;
  }
}

/* scss-combine:modules/account */
// scss-lint:disable PlaceholderInExtend
// Variables

$account-light-color: $input-background-color;
$account-accent-color: $accent-color;
$account-border-color: $border-color;
$account-gutter: $gutter;
$account-font-size: $font-size;

/* scss-combine:../core/account */
// Default Variables

$account-link-color: #888 !default;
$account-light-color: #fff !default;
$account-accent-color: #5dc5e3 !default;
$account-border-color: #e4e4e4 !default;
$account-gutter: 30px !default;
$account-font-size: 15px !default;
$account-border-radius: 0 !default;
$account-text-color: #5f5f5f !default;

$account-card-background-color: #f5f5f5 !default;

$giftcard-nav-use-default-styles: true !default;

$account-breakpoint-x-small: 400px !default; // the account table columns change to full-width
$account-breakpoint-small: 620px !default; // menu changes from full-width to column
$account-breakpoint-medium: 900px !default; // menu changes from 35% to 25% width

// Internal Variables

$account-font-size-heading: $account-font-size + 2 !default;

$account-text-color-light: lighten($account-text-color,20%) !default;

$account-gutter-inner: $account-gutter / 2 !default;

$auth-gutter: $account-gutter !default;
$auth-font-size: $account-font-size !default;

// Imports

/* scss-combine:account/components/layout */
.account-wrapper {
  @extend %clearfix;
  font-size: $account-font-size;
}

.account-nav,
.account-body {
  vertical-align: top;
}

.account-body {
  @media screen and (min-width: $account-breakpoint-small) {
    float: right;
    width: 65%;
    padding-left: $account-gutter-inner;
  }

  @media screen and (min-width: $account-breakpoint-medium) {
    width: 75%;
  }

  > :first-child {
    margin-top: 0;
  }

  .account-nav-hidden & {
    float: none;
    width: 100%;
    padding-left: 0;
    margin-left: 0;
  }
}

.account-nav {
  @media screen and (max-width: $account-breakpoint-small - 1) {
    margin-bottom: $account-gutter;
  }

  @media screen and (min-width: $account-breakpoint-small) {
    float: left;
    width: 35%;
    padding-right: $account-gutter-inner;
  }

  @media screen and (min-width: $account-breakpoint-medium) {
    width: 25%;
  }
}

/* scss-combine:account/components/forms */
.account-wrapper {
  .form-label-text {
    display: inline-block;
    width: 100%;
    margin-bottom: 5px;
  }

  .form-field-checkbox,
  .form-field-radio {
    .form-label-text { width: auto; }
  }

  .form-field {
    margin-bottom: $account-gutter-inner;
  }

  .form-input {
    width: 100%;

    &.account-form-half {
      width: 50%;
    }
  }

  .form-actions {
    clear: both;
  }
}

.account-form-column-container {
  @extend %clearfix;

  .form-field {
    @media screen and (min-width: 480px) {
      float: left;
      width: 50%;

      &:nth-child(odd) { padding-right: $account-gutter-inner; }
      &:nth-child(even) { padding-left: $account-gutter-inner; }
    }
  }
}

/* scss-combine:account/components/table */
.account-wrapper {
  table {
    width: 100%;
    margin-top: $account-gutter-inner;
    margin-bottom: $account-gutter-inner;
  }

  td,
  th {
    padding: $account-gutter-inner;
  }
}

.account-table-tight {
  th,
  td {
    padding: 10px 0;
    border-bottom: 1px solid $account-border-color;
  }
}

/* scss-combine:account/components/list */
// Layout
// Each list item has 3 sections: thumbnail, body, and badge.

.account-items {
  margin-bottom: $account-gutter;
}

.account-item {
  position: relative;
  display: table;
  width: 100%;
  border-bottom: 1px solid $account-border-color;

  &:first-of-type {
    border-top: 1px solid $account-border-color;
  }
}

.account-item-thumbnail,
.account-item-body,
.account-item-badge,
.account-item-actions {
  padding-top: $account-gutter-inner;
  padding-bottom: $account-gutter-inner;

  @media screen and (min-width: $account-breakpoint-x-small) {
    display: table-cell;
    vertical-align: top;
  }
}

// Link
// Makes the entire item clickable

.account-item-link {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 100;
}

// Thumbnail

.account-item-thumbnail {
  min-width: 100px;

  img {
    height: auto;
    max-width: 100px;
  }
}

// Body

.account-item-body {
  width: 100%;

  @media screen and (min-width: $account-breakpoint-x-small) {
    .account-item-thumbnail + & {
      padding-left: $account-gutter-inner;
    }
  }
}

.account-item-title {
  margin-top: 3px;
  font-size: $account-font-size;

  a {
    color: inherit;
  }
}

.account-item-title-large {
  font-size: $account-font-size * 1.2;
}

.account-item-description {
  margin-top: 0;
  margin-bottom: 5px;
  color: $account-text-color;
}

.account-item-details {
  @extend %clearfix;
  font-size: $account-font-size;
  color: $account-text-color;
}

.account-item-detail {
  float: left;
  margin-top: $account-gutter-inner;
  margin-right: $account-gutter;
}

//scss-lint:disable VariableForProperty
.account-item-detail-title {
  display: block;
  margin-top: 0;
  margin-bottom: 3px;
  font-size: 12px;
  font-weight: normal;
  letter-spacing: 1px;
  color: mix($account-light-color,$account-text-color,60%);
  text-transform: uppercase;
}

// Badge

.account-item-badge,
.account-item-actions {
  white-space: nowrap;
}

/* scss-combine:account/components/header */
.account-header {
  display: table;
  width: 100%;
  margin-bottom: $account-gutter-inner;
}

.account-heading,
.account-toolbar {
  display: table-cell;
  vertical-align: baseline;
}

.account-toolbar {
  text-align: right;

  * {
    display: inline;
  }
}

.account-tool {
  position: relative;
  z-index: 10;
  display: inline-block;
  padding: 0;
  background: transparent;
  margin-left: 10px;
  cursor: pointer;
  color: inherit;
  border: 0;

  &:hover { color: $account-link-color; }

  &:focus { outline: 0; }
}

/* scss-combine:account/components/navigation */
.account-nav-list {
  padding: 0;
  margin-bottom: $account-gutter-inner;
  list-style: none;
  border: 1px solid $account-border-color;
  border-radius: $account-border-radius;
}

.account-nav-item {
  color: $account-link-color;
  border-top: 1px solid $account-border-color;

  &:first-child {
    border-top: 0;
  }

  &.is-active {
    color: $account-accent-color;
    border-left: 3px solid $account-accent-color;
  }
}

.account-nav-link {
  display: block;
  padding: 15px;
  color: inherit;
}

.account-nav-badge {
  float: right;
}

/* scss-combine:account/components/pagination */
.account-wrapper .pagination {
  margin-top: $account-gutter-inner;
}

/* scss-combine:account/components/card */
%account-card-style {
  background: $account-card-background-color;

  .form-input {
    background-color: $account-light-color;
  }
}

.account-card {
  @extend %account-card-style;
  padding: $account-gutter-inner;
  margin: $account-gutter-inner 0;
  border-radius: $account-border-radius;
}

/* scss-combine:account/components/toggle */
// Set the initial toggle state to hidden
.account-toggle-hidden {
  display: none;
}

/* scss-combine:account/components/status */
// Status
// A label used to mark the status of an item

.account-status {
  padding: 6px 10px 5px;
  margin: 0;
  font-size: 12px;
  font-weight: normal;
  line-height: 1;
  letter-spacing: 1px;
  color: $account-light-color;
  text-align: center;
  text-transform: uppercase;
  background: #8e8e8e; // TODO: Colors for each status
}

/* scss-combine:account/components/shipments */
// Shipments
// A list of shipments made for an order. Shown on the Order Details page.

.account-shipments {
  margin-bottom: $account-gutter;
}

.account-shipments-table {
  th,
  td {
    padding: 10px 0;
    text-align: left;
  }

  th {
    padding: $account-gutter-inner 0 0;
    border-top: 1px solid $account-border-color;
  }

  // Override default margins
  .account-wrapper & {
    margin-top: 0;
    margin-bottom: 0;
  }
}


/* scss-combine:account/pages/address */
// Address List

.account-page-add-address {
  .account-content {
    padding-top: $account-gutter-inner;
    border-top: 1px solid $account-border-color;
  }
}

.account-address-detail {
  display: block;
}

// Add Address

.account-address-form {
  padding-top: $account-gutter-inner;

  @media screen and (min-width: $account-breakpoint-medium) {
    .form-field {
      float: left;
      width: 50%;
      padding-right: $account-gutter-inner;

      &:nth-of-type(2n) {
        padding-right: 0;
        padding-left: $account-gutter-inner;
      }
    }
  }

  .form-actions {
    padding-top: $account-gutter-inner;
  }
}

/* scss-combine:account/pages/orders-receipt */
.account-page-orders-receipt .account-content {
  padding-top: $account-gutter-inner;
  border-top: 1px solid $account-border-color;
}

// Summary

.account-receipt-summaries {
  @extend %clearfix;
}

.account-receipt-summary {
  float: left;
  width: 33%;
  padding-right: $account-gutter;
}

.account-receipt-summary-title {
  margin-top: 5px;
  margin-bottom: 10px;
  font-size: $account-font-size;
}

.account-receipt-summary-address {
  line-height: 1.5;
}

.account-receipt-detail {
  margin-bottom: 5px;
}

.account-receipt-detail-title {
  color: $account-text-color-light;
}

// Comments

.account-receipt-comments {
  white-space: pre-line;
}

// Receipt Items (products)

.account-receipt-items {
  padding-top: $account-gutter-inner;
}

.account-receipt-download {
  margin: 10px 0;
}

// Totals

.account-receipt-totals {
  display: table;
  width: 50%;
  margin-left: 50%;
}

.account-receipt-total {
  display: table-row;
  margin-bottom: $account-gutter-inner;
}

.account-receipt-total-title,
.account-receipt-total-value {
  display: table-cell;
  padding-top: $account-gutter-inner;
  padding-bottom: $account-gutter-inner;
  border-top: 1px solid $account-border-color;

  .account-receipt-total:first-of-type & {
    border-top: 0;
  }
}

.account-receipt-total-title {
  font-weight: normal;
  letter-spacing: 1px;
  color: $account-text-color-light;
}

.account-receipt-total-value {
  text-align: right;
}

/* scss-combine:account/pages/recent-items */

/* scss-combine:account/pages/returns */
// Return form

.account-return-table {
  th {
    text-align: left;

    &:last-of-type {
      text-align: right;
    }
  }

  .form-field {
    margin-bottom: 0;
  }
}

.account-return-fields {
  margin-top: $account-gutter;

  .form-field-select {
    width: 50%;
  }
}

/* scss-combine:account/pages/wishlists */
.account-wishlists {
  margin-bottom: 30px;
}

/* scss-combine:account/pages/messages */
// Listing

.account-messages-table.table-clean {
  border-bottom: 1px solid $account-border-color;

  td {
    padding-right: 0;
    padding-left: 0;
    vertical-align: top;
    border-top: 1px solid $account-border-color;
  }
}

.account-messages-table-date {
  width: 22%;
  text-align: right;
}

.account-message-subject {
  margin-top: 0;
  margin-bottom: 10px;
  font-size: $account-font-size-heading;
  font-weight: 500;

  .account-message-is-reply &:before {
    padding-right: 5px;
    content: "\21c9";
  }

  .account-message-is-read & {
    color: $account-text-color-light;
  }
}

.account-message-content {
  padding-right: $account-gutter;
  font-size: $account-font-size;
  line-height: 1.5;
  color: $account-text-color;
  white-space: pre-line;

  .account-message-is-read & {
    color: lighten($account-text-color-light,10%);
  }
}

.account-message-date {
  color: $account-text-color-light;
}

// Form

.account-messages-form-subject {
  width: 50%;
}

/* scss-combine:account/pages/download */
// List

.account-download {
  padding: $account-gutter-inner 0 0;
  margin: $account-gutter-inner 0;
  border-top: 1px solid $account-border-color;
}

.account-download-title {
  margin: 0;
  font-size: 1em;
}

.account-download-link {
  color: inherit;
  text-decoration: underline;
}

.account-download-filename {
  font-size: 1.2em;
}

.account-download-filesize {
  padding-left: 5px;
  font-weight: normal;
  color: $account-text-color-light;
}

.account-download-description {
  padding-top: 10px;
  padding-bottom: 10px;
}

.account-download-expiry {
  font-size: 0.9em;
  color: $account-text-color-light;
}

.account-download-expiry-item {
  display: block;
  padding-bottom: 5px;

  &:last-of-type {
    padding-bottom: 0;
  }
}

// Gallery

.account-downloads-gallery-image {
  text-align: center;
}

.account-downloads-gallery-thumbs {
  @extend %clearfix;
  text-align: center;
}

.account-downloads-gallery-thumb {
  display: inline-block;
  width: 10%;
  height: 10%;
  padding: 0 2px;
  vertical-align: middle;
  cursor: pointer;

  img {
    width: 100%;
    height: auto;
  }
}

/* scss-combine:account/pages/invoice */
.account-invoice-date {
  margin-top: -20px;
  font-size: $account-font-size;
}

// Address

.account-invoice-addresses {
  @extend %clearfix;
  margin-top: $account-gutter;
  margin-bottom: $account-gutter;
}

.account-invoice-address {
  float: left;
  margin-right: $account-gutter;
}

.account-invoice-address-title {
  margin-top: 5px;
  margin-bottom: 10px;
  font-size: $account-font-size;
}

.account-invoice-address-body {
  line-height: 1.5;
}

// List

.account-invoice-table {
  .account-wrapper & {
    margin-bottom: 0;
  }

  th,
  td {
    padding-right: $account-gutter-inner;
    text-align: left;
    vertical-align: top;

    &:nth-of-type(0n+3) {
      width: 10%;
    }

    &:last-of-type {
      width: 160px;
      padding-right: 0;
      text-align: right;
    }
  }

  td:first-of-type {
    width: 60px + 25px;
  }
}

.account-invoice-item-thumbnail {
  width: 60px;
  height: auto;
}

.account-invoice-item-name {
  margin-bottom: 5px;
  font-weight: bold;
}

.account-invoice-total-title {
  font-weight: bold;
}

// Totals

.account-invoice-totals {
  .account-wrapper & {
    width: auto;
    margin-top: 0;
    margin-left: auto;
  }

  th,
  td {
    padding-right: $account-gutter-inner;

    &:last-of-type {
      width: 160px;
      padding-right: 0;
      text-align: right;
    }
  }
}

/* scss-combine:account/pages/settings */
.account-page-settings {
  .alert:first-of-type {
    margin-top: 0;
  }

  .account-content {
    padding-top: $account-gutter-inner;
    border-top: 1px solid $account-border-color;
  }
}

.account-settings-form {
  @extend %clearfix;
  padding-top: $account-gutter-inner;

  .form-field {
    float: left;
    width: 50%;
    padding-right: $account-gutter-inner / 2;
    vertical-align: top;

    &:nth-of-type(2n+0) {
      padding-right: 0;
      padding-left: $account-gutter-inner / 2;
    }
  }

  .form-actions {
    padding-top: $account-gutter-inner;
  }
}


/* scss-combine:account/pages/auth-login */

.account-page-login .alert {
  max-width: 860px;
  margin-top: 0;
  margin-right: auto;
  margin-bottom: $account-gutter;
  margin-left: auto;
}

.account-login-wrapper {
  max-width: 860px;
  margin-right: auto;
  margin-left: auto;

  @media screen and (min-width: $account-breakpoint-small) {
    display: table;
    width: 100%;
    table-layout: fixed;
  }
}

.account-page-login .account-sub-heading {
  margin: 0 0 20px;
}

.account-login,
.account-create {
  @media screen and (min-width: $account-breakpoint-small) {
    display: table-cell;
    vertical-align: top;
  }
}

// Login Form

.account-login {
  @media screen and (max-width: $account-breakpoint-small - 1) {
    margin-bottom: $account-gutter;
  }

  @media screen and (min-width: $account-breakpoint-small) {
    padding: $account-gutter-inner (30px + $account-gutter-inner) $account-gutter-inner 0;
  }
}

.account-login-button {
  margin-right: $account-gutter-inner;
}

// New Account

.account-create {
  padding: $account-gutter-inner;
  background: $account-card-background-color;
}

.account-create-intro {
  &:empty {
    display: none;
  }
}

.account-create-facts {
  padding-left: 20px;
  margin-bottom: 30px;
  list-style: disc;

  li:empty {
    display: none;
  }
}

/* scss-combine:account/pages/auth-forgot */
.account-page-forgot .account-body {
  width: 100%;
  max-width: 600px;
  margin-right: auto;
  margin-left: auto;
  text-align: center;
  float: none;
}

.account-forgot-form {
  display: table;
  width: 100%;
  margin-top: $account-gutter;

  .form-field,
  .form-actions {
    display: table-cell;
    text-align: left;
    vertical-align: bottom;
  }

  .form-actions {
    width: 1px;
    padding-left: 10px;
  }
}

/* scss-combine:account/pages/auth-create */
.account-page-create {
  .account-header {
    padding-bottom: $account-gutter-inner;
    margin-bottom: $account-gutter;
    border-bottom: 1px solid $account-border-color;
  }

  .account-body {
    max-width: 860px;
    margin-right: auto;
    margin-left: auto;
  }
}

.account-create-form {
  .g-recaptcha > div {
    margin: 0 auto;
  }

  @media screen and (min-width: $account-breakpoint-small) {
    .form-field {
      float: left;
      width: 50%;
      padding-right: $account-gutter-inner;

      &:nth-of-type(2n) {
        padding-right: 0;
        padding-left: $account-gutter-inner;
      }
    }
  }
}

.account-create-details,
.account-create-address {
  @extend %clearfix;
  padding-bottom: $account-gutter-inner;
  margin-bottom: $account-gutter;
  border-bottom: 1px solid $account-border-color;
}

.account-create-form-actions {
  text-align: center;
}

.account-create-captcha {
  display: inline-block;
  vertical-align: middle;

  @media screen and (max-width: $account-breakpoint-small - 1) {
    margin-bottom: $account-gutter-inner;
  }

  @media screen and (min-width: $account-breakpoint-small) {
    margin-right: $account-gutter-inner;
  }
}

/* scss-combine:account/pages/auth-created */
.account-page-created .account-body {
  float: none;
  width: 100%;
  max-width: 600px;
  margin-right: auto;
  margin-left: auto;
  text-align: center;

  p {
    margin-bottom: $account-gutter;
    line-height: 1.5;
  }

  em {
    font-family: monospace;
    font-style: normal;
    font-weight: bold;
    background: $account-card-background-color;
  }
}

/* scss-combine:account/pages/auth-new-password */
.account-page-new-password .account-content {
  width: 100%;
  max-width: 400px;
  margin-right: auto;
  margin-left: auto;
}

.new-password-requirements {
  margin-bottom: $account-gutter;
  text-align: center;
}


/* scss-combine:account/pages/gift-certificate */
// (optional) gift card nav

@if ($giftcard-nav-use-default-styles) {
  .giftcard-nav {
    padding: $account-gutter * 2;
    margin-bottom: $account-gutter * 2;
    text-align: center;
  }

  .giftcard-nav-item {
    display: inline-block;
    margin: 0 1em;
    color: $account-link-color;

    &.is-active { color: $account-text-color; }
  }
}

.giftcard-heading-container {
  margin-bottom: $account-gutter * 2;
  text-align: center;
}


// Purchase

.giftcard-form-help-message {
  display: block;
  margin-top: 6px;
}

.giftcard-form-preview {
  iframe { width: 100%; }
}

.giftcard-single-theme {
  display: none;
}


// Check balance

.giftcard-balance-container {
  max-width: 600px;
  margin: 0 auto;
}

.form-giftcard-balance {
  position: relative;

  .form-field-title {
    position: absolute;
    left: -9999px;
  }

  .form-field-control {
    display: block;

    @media screen and (min-width: 600px + ($account-gutter-inner * 2)) {
      margin-right: calc(30% + #{$account-gutter-inner});
    }
  }

  .form-actions {
    @media screen and (min-width: 600px + ($account-gutter-inner * 2)) {
      position: absolute;
      top: 0;
      right: 0;
      width: 30%;
    }
  }

  .button {
    width: 100%;
  }
}


// Redeem

.giftcard-redeem-steps {
  line-height: 1.5;

  li { margin-bottom: 0.75em; }
}



.account-heading {
  @extend %heading-text-treatment;
  padding-bottom: 30px;
  font-size: 20px;
  text-align: left;

  .account-page-create &,
  .account-page-forgot & {
    @extend %center, %full-width;
    padding: ($gutter * 3) ($gutter * 2) ($gutter * 4);
  }
}

.account-sub-heading,
.auth-sub-heading {
  @extend .section-title;
  margin-top: $gutter;
  text-align: left;
}

.account-wrapper {
  .account-header {
    margin: 0;
    border: 0;
  }

  .form-field {
    margin-bottom: $gutter * 1.5;
  }
}

.account-button-primary { @extend .button-primary; }
.account-button-secondary { @extend .button-secondary; }
.account-button-small { @extend .button-small; }

.account-nav + .account-body {
  @media screen and (min-width: 620px) {
    padding-left: $gutter;
    border-left: 1px solid $border-color;
  }

  @media screen and (min-width: 900px) {
    padding-left: $gutter * 2;
  }
}

// Orders Navigation
.account-nav-list {
  padding: 5px $gutter;
  font-size: 14px;
  font-weight: bold;
  border: 2px solid $border-color;
  border-radius: 3px;

  @media screen and (min-width: 620px) {
    padding: 0;
    border: 0;
  }
}

.account-nav-item {
  border-top: 0;

  &.is-active { border-left: 0; }
}

.account-nav-link { padding: 10px 0; }

// Account Items

.account-item {
  padding: $gutter 0;

  &:first-of-type {
    padding-top: 0;
    border-top: 0;
  }
}

.account-item-thumbnail {
  padding-right: $gutter;

  img { border: 1px solid $border-color; }
}

.account-receipt-summaries {
  padding: $gutter 0;
}

// Recently Viewed

.account-recently-viewed {
  @include container;

  .account-product-item {
    // @extend .product-item, .grid-m-2, .grid-l-3;
    margin-bottom: $gutter * 2;
    @include breakpoint(m) { @include with-layout($grid-small) { @include gallery(6 of 12); } }
    @include breakpoint(l-up) { @include gallery(4 of 12); }
  }

  .account-product-item-title {
    @extend .product-item-title;
  }

  .account-product-item-brand {
    display: block;
    margin-bottom: 5px;
  }
}

// Order Pagination
.pagination { position: relative; }
.pagination-count { text-align: center; }

.pagination-next,
.pagination-previous {
  position: absolute;
  bottom: 0;
}

.pagination-next { right: 0; }
.pagination-previous { left: 0; }

// Create Account Page
.account-create-form {
  .form-field {
    @include breakpoint(s) {
      width: 100%;
      // scss-lint:disable ImportantRule
      padding: 0 !important;
    }
  }
}

.account-create-address {
  border-bottom: 0;
}

// Login Page
.account-login-wrapper {

  @include breakpoint(m) {
    .account-button-secondary {
      margin-top: $gutter;
      margin-left: 0;
    }
  }

  @include breakpoint(s) {
    margin-top: $gutter * 3;
    margin-bottom: $gutter * 2;
  }

  @include breakpoint(m-up) {
    margin-top: 70px;
    margin-bottom: 125px;
  }
}

.account-create {
  background-color: transparent;

  @include breakpoint(s) {
    margin-top: $gutter * 2;
  }

  @include breakpoint(m-up) {
    padding-left: 37.5px;
    border-left: 1px solid $border-color;
  }
}

.account-login,
.account-create {
  @include breakpoint(s) {
    display: block;
  }
}

/* scss-combine:modules/gift-certificates */
.giftcard-body {
  @include container(710px);
  margin-bottom: 50px;

  .form-select {
    height: 38px;
    background-color: $white;
    border: 1px solid $select-border-color;
  }
}

/* scss-combine:modules/baguettebox */
/*!
 * baguetteBox.js
 * @author  feimosi
 * @version 1.4.1
 * @url https://github.com/feimosi/baguetteBox.js
 */

// scss-lint:disable QualifyingElement, IdSelector, SelectorFormat

%arrow-button {
  top: calc(50% - 30px);
  width: 44px;
  height: 60px;
}

#baguetteBox-overlay {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1000000;
  display: none;
  width: 100%;
  height: 100%;
  overflow: hidden;
  background-color: rgba($placeholder-image-background, 0.98);
  opacity: 0;
  transition: opacity 0.5s ease;

  &.visible { opacity: 1; }

  .full-image {
    position: relative;
    display: inline-block;
    width: 100%;
    height: 100%;
    text-align: center;

    figure {
      display: inline;
      height: 100%; // Opera 12 image stretching fix
      margin: 0;
    }

    img {
      display: inline-block;
      width: auto;
      height: auto;
      max-width: 100%;
      max-height: 90%;
      vertical-align: middle;
    }

    figcaption {
      position: absolute;
      bottom: 0;
      display: block;
      width: 100%;
      padding-bottom: 16px;
      font-weight: 300;
      line-height: 1.8;
      text-align: center;
      white-space: normal;
    }

    &:before {
      display: inline-block;
      width: 1px;
      height: 50%;
      margin-right: -1px;
      content: "";
    }
  }
}

#baguetteBox-slider {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  white-space: nowrap;
  transition: left 0.4s ease, transform 0.4s ease;

  &.bounce-from-right {
    animation: bounceFromRight 0.4s ease-out;
  }

  &.bounce-from-left {
    animation: bounceFromLeft 0.4s ease-out;
  }
}

@keyframes bounceFromRight{
  0% { margin-left: 0; }
  50% { margin-left: -30px; }
  100% { margin-left: 0; }
}

@keyframes bounceFromLeft{
  0% { margin-left: 0; }
  50% { margin-left: 30px; }
  100% { margin-left: 0; }
}

.baguetteBox-button {
  position: absolute;
  padding: 0;
  margin: 0;
  font-size: 1.6em;
  cursor: pointer;
  background-color: transparent;
  border: 0;
  border-radius: 15%;
  outline: none;
  transition: background-color 0.4s ease;

  &#next-button {
    @extend %arrow-button;
    right: 2%;
  }

  &#previous-button {
    @extend %arrow-button;
    left: 2%;
  }

  &#close-button {
    top: 20px;
    right: 20px;
    width: 30px;
    height: 30px;
  }

  // Firefox fix
  svg {
    position: absolute;
    top: 0;
    left: 0;

    g {
      stroke: contrast($placeholder-image-background, 100%);
    }
  }
}

// http://tobiasahlin.com/spinkit/
.spinner:not(.button) {
  position: absolute;
  top: 50%;
  left: 50%;
  display: inline-block;
  width: 40px;
  height: 40px;
  margin-top: -20px;
  margin-left: -20px;
}

.double-bounce1,
.double-bounce2 {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  opacity: 0.6;
  animation: bounce 2s infinite ease-in-out;
}

.double-bounce2 { animation-delay: -1s; }

@keyframes bounce {
  0%, 100% { transform: scale(0); }

  50% { transform: scale(1); }
}


// Components
/* scss-combine:components/alerts */
// Alerts are fixed at the top of the page

.alert {
  position: relative;
  display: block;
  width: 100%;
  padding: 10px 45px;
  margin-top: $gutter;
  margin-bottom: $gutter;
  border-radius: 3px;
}

.alert-dismiss {
  position: absolute;
  top: 50%;
  right: $gutter;
  font-size: 18px;
  color: $white;
  cursor: pointer;
  transform: translateY(-50%);

  &:hover {
    color: darken($white, 15%);
  }
}

.alert-message {
  font-family: $primary-font;
  font-size: 11px;
  line-height: 1.4;
  letter-spacing: 0.12em;
  color: $white;
  text-transform: uppercase;

  &:before {
    position: absolute;
    top: 50%;
    left: $gutter;
    display: block;
    width: 18px;
    height: 18px;
    content: "";
    transform: translateY(-50%);

    .alert-success & { @include alert-success; }
    .alert-error & { @include alert-error; }
    .alert-info & { @include alert-info; }
  }
}

.alert-success { background-color: $alert-success; }
.alert-error { background-color: $alert-error; }
.alert-info { background-color: $alert-info; }

/* scss-combine:components/banners */
.banners {
  padding-right: $gutter;
  padding-left: $gutter;
  background-color: $banner-background-color;

  @include breakpoint(l-up) {
    padding-right: $gutter * 2;
    padding-left: $gutter * 2;
  }
  span { 
    margin: 0 5px;
    
    @include breakpoint(m-up) {
      margin: 0 50px; 
    }
  }
}
.banner-bottom .banners { background-color: transparent; }

.banner {
  overflow: auto;
  border-bottom: 1px solid rgba($white, 0.1);

  &:last-of-type {
    border-bottom: 0;
  }

  &.rte {
    font-family: $primary-font;
    font-size: 11px;
    line-height: 1.4;
    letter-spacing: 0.12em;
    color: $white;
    text-align: center;
    text-transform: uppercase;

    a {
      color: $banner-link-color;

      &:hover {
        @include hover($banner-link-color);
      }
    }
  }
}

/* scss-combine:components/breadcrumbs */
.breadcrumbs {
  padding: 13px $gutter * 2;
  text-align: center;
  background-color: $breadcrumb-background-color;
  border-bottom: 1px solid $border-color;

  @include breakpoint(s) {
    padding-right: $gutter;
    padding-left: $gutter;
    text-align: left;
  }
}

.breadcrumbs-list {
  font-size: 0;
}

.breadcrumb {
  display: inline-block;
  font-size: $font-size;
}

.breadcrumb-label {
  display: block;

  &.link {
    color: $accent-color;

    &:after {
      margin-right: $gutter / 2;
      margin-left: $gutter / 2;
      color: $lightest-text;
      content: "/";
    }
  }

  &.static {
    color: $lightest-text;
  }
}

/* scss-combine:components/share-buttons */
.share-heading {
  @extend %section-title-text-treatment;
  display: inline-block;
  margin: 0 $gutter 0 0;
  font-family: $primary-font;
  font-size: $font-size;

  &:after {
    content: ":";
  }
}

.share-buttons {
  display: inline-block;
  font-size: 0;
  vertical-align: text-bottom;

  .social-link {
    margin-right: 12px;

    &:last-of-type {
      margin-right: 0;
    }

    > a {
      width: 15px;
      height: 15px;
      color: $lightest-text;

      // scss-lint:disable NestingDepth
      &:hover,
      &:active {
        color: $primary-color;
      }
    }
  }
}

/* scss-combine:components/cart-preview */
.cart-preview-container {
  position: absolute;
  top: -($gutter / 2);
  right: 0;
  z-index: index($elements, cart-preview);
  display: none;
  width: 380px;
  padding: $gutter ($gutter + 5);
  font-family: $primary-font;
  font-weight: normal;
  color: $body-color;
  background-color: $white;
  box-shadow: 0 1px 4px 0 $shadow-color;

  &.animating,
  &.visible {
    display: block;

    @include breakpoint(s) {
      display: none;
    }
  }
}

.cart-preview {
  position: relative;
}

.cart-preview-title {
  @extend %section-title-text-treatment;
  padding-bottom: 15px;
  margin: 0;
  font-size: 16px;
  border-bottom: 1px solid $border-color;
}

.cart-preview-close {
  @extend %button-reset;
  position: absolute;
  top: 21px;
  right: $gutter + 5;
  color: $body-color;

  svg {
    width: 12px;
    height: 12px;
  }
}

.cart-preview-body {
  padding-top: 25px;

  &.scroll {
    max-height: 300px;
    overflow-y: auto;
  }
}

.cart-preview-list-item {
  @include container();
  margin-bottom: $gutter * 2;

  &:last-of-type {
    margin-bottom: $gutter * 3;
  }
}

.cart-preview-list-item-image {
  @include with-layout($cart-preview) { @include span(first 2 of 12); }
  a {
    display: block;

    img {
      max-height: 65px;
    }
  }
}

.cart-preview-list-item-details {
  @include with-layout($cart-preview) { @include span(7 of 12); }
}

.cart-preview-list-item-price {
  @include with-layout($cart-preview) { @include span(last 3 of 12); }
  color: $lighter-text;
  text-align: right;
}

.cart-preview-list-item-name {
  font-family: $primary-font;
  font-size: 14px;
  font-weight: bold;
  line-height: 1.4;

  > a {
    color: $primary-color;
  }
}

.cart-preview-list-item-options,
.cart-preview-list-item-quantity {
  font-family: $secondary-font;
  font-size: 12px;
  color: $lighter-text;
}

.cart-preview-list-item-remove {
  font-size: 10px;

  .primary-navigation & {
    color: $primary-color;
  }
}

.cart-preview-footer {
  .button {
    width: 100%;
    margin: 0;
  }

  .tertiary {
    margin-bottom: $gutter / 2;
  }
}

.cart-preview-pricing {
  @extend %clearfix;
  margin-bottom: 10px;
  border-top: 1px solid $border-color;
  border-bottom: 1px solid $border-color;
}

.cart-preview-discount {
  @extend %clearfix;
  border-top: 1px solid $border-color;
}

.cart-preview-total-price-label,
.cart-preview-total-price {
  height: 45px;
  line-height: 45px;
}

.cart-preview-total-price-label {
  float: left;
  font-size: 12px;
  color: $lighter-text;
  text-transform: uppercase;
}

.cart-preview-total-price {
  float: right;
  font-size: 15px;
  color: $body-color;
}

.cart-preview-empty {
  padding-top: $gutter * 2;
  padding-bottom: $gutter * 2;
  font-size: $font-size;
  font-weight: bold;
  line-height: $font-size;
  color: $lighter-text;
  text-align: center;
}

/* scss-combine:components/pagination */
.pagination {
  @extend %clearfix;
  float: left;
  width: 100%;
  margin-top: 100px;
  margin-bottom: 65px;

  .content & {
    margin-top: 70px;
    margin-bottom: 35px;
  }
}

.pagination-list {
  font-size: 0;
  text-align: center;
}

.pagination-label,
.pagination-item,
.pagination-previous,
.pagination-next {
  display: inline-block;
  margin-right: $gutter;
  font-family: $secondary-font;
  font-size: $font-size;
  font-weight: bold;

  &:last-of-type { margin-right: 0;}
}

.pagination-previous { float: left; }
.pagination-next { float: right; }

/* scss-combine:components/promos */
.promo-message {
  padding: 10px;
  font-family: $primary-font;
  font-size: 11px;
  font-weight: bold;
  line-height: 1.4;
  letter-spacing: 0.12em;
  text-align: center;
  text-transform: uppercase;
  background-color: $promo-color;
  border-radius: 3px;

  .main-content > & {
    margin-top: -1px;
    border-radius: 0;
  }

  + .mosaic { margin-top: 0; }

  .product-container & {
    margin-top: -$gutter;
    margin-bottom: $gutter * 2;
  }

  .cart-messages & {
    margin-top: $gutter * 2;
    margin-bottom: -$gutter;
  }
}

.cart-messages {
  padding-right: $gutter * 2;
  padding-left: $gutter * 2;
}

/* scss-combine:components/compare-bar */
.compare-tab {
  @extend %clearfix;
  position: fixed;
  bottom: 0;
  left: 50%;
  z-index: index($elements, compare-tab);
  display: none;
  min-width: 580px;
  padding: 13px 19px;
  font-size: $font-size;
  background: $white;
  box-shadow: 0 0 4px 0 $shadow-color;

  @include breakpoint(m) {
    // scss-lint:disable ImportantRule
    display: none !important;
  }

  &.animating,
  &.visible {
    display: block;
    transform: translateY(100%);
    transition: transform 0.2s ease;
  }

  &.visible {
    transform: translateY(0);
  }
}

.compare-tab-left {
  float: left;
  margin-right: $gutter;

  .item-limit { font-weight: bold; }
  .clear-compare { font-size: 12px; }
}

.compare-submit {
  position: absolute;
  right: 15px;
  bottom: 13px;
  height: 40px;
}

.compare-items-list {
  margin-right: 120px;
  font-size: 0;
}

.compare-tab-item,
.compare-tab-item-empty {
  position: relative;
  display: inline-block;
  width: 40px;
  height: 40px;
  margin-right: 20px;
  text-align: center;
  border: 1px dashed transparent;
}

.compare-tab-item-empty {
  border-color: $border-color;
}

.compare-tab-item-number {
  position: absolute;
  top: 50%;
  left: 50%;
  font-size: 16px;
  font-weight: bold;
  color: lighten($lightest-text, 25%);
  transform: translate(-50%, -50%);
}

.compare-tab-item-remove {
  position: absolute;
  top: -4px;
  right: -4px;
  cursor: pointer;

  .icon-remove {
    width: 14px;
    height: 14px;
  }

  &:hover {
    color: $accent-color;
  }
}

.compare-tab-item-image {
  > img {
    max-height: 40px;
  }
}

/* scss-combine:components/loading */
/*! Theme: Capacity v1.14.1 */
.loading {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 100;
  display: none;
  background-color: $body-background-color;
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' width='50' height='50' fill='#{escape-hex($navigation-color)}'%3E %3Cpath opacity='.25' d='M16 0 A16 16 0 0 0 16 32 A16 16 0 0 0 16 0 M16 4 A12 12 0 0 1 16 28 A12 12 0 0 1 16 4'/%3E %3Cpath d='M16 0 A16 16 0 0 1 32 16 L28 16 A12 12 0 0 0 16 4z'%3E %3CanimateTransform attributeName='transform' type='rotate' from='0 16 16' to='360 16 16' dur='0.8s' repeatCount='indefinite' /%3E %3C/path%3E %3C/svg%3E ");
  background-position: center;
  background-repeat: no-repeat;
  opacity: 0.7;

  &.visible {
    display: block;
  }
}

